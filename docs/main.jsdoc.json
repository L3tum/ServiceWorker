[
  {
    "comment": "/**\n                         * File is something else, just leave it\n                         */",
    "meta": {
      "range": [
        11405,
        11417
      ],
      "filename": "index.js",
      "lineno": 381,
      "columnno": 24,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000901",
        "name": "abort",
        "type": "Literal",
        "funcscope": "<anonymous>",
        "value": true,
        "paramnames": []
      }
    },
    "description": "File is something else, just leave it",
    "name": "abort",
    "longname": "<anonymous>~abort",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "$longname": "abort"
  },
  {
    "comment": "/**\n                         * File is something else, just leave it\n                         */",
    "meta": {
      "range": [
        16952,
        16964
      ],
      "filename": "index.js",
      "lineno": 514,
      "columnno": 24,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100001261",
        "name": "abort",
        "type": "Literal",
        "funcscope": "<anonymous>",
        "value": true,
        "paramnames": []
      }
    },
    "description": "File is something else, just leave it",
    "name": "abort",
    "longname": "<anonymous>~abort",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "$longname": "abort"
  },
  {
    "comment": "/**\n * This is called every time the page is loaded. Therefore, we want to keep it lightweight\n * @param event {Event}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        23445,
        25818
      ],
      "filename": "index.js",
      "lineno": 679,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100001748",
        "name": "activateEvent",
        "type": "FunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "description": "This is called every time the page is loaded. Therefore, we want to keep it lightweight",
    "params": [
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "name": "event"
      }
    ],
    "kind": "constant",
    "name": "activateEvent",
    "longname": "activateEvent",
    "scope": "global",
    "$longname": "activateEvent"
  },
  {
    "comment": "/**\n * Converts a byte array to a string\n * @param array {number}\n * @returns {string}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        2273,
        2365
      ],
      "filename": "index.js",
      "lineno": 78,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000103",
        "name": "bin2String",
        "type": "FunctionExpression"
      }
    },
    "description": "Converts a byte array to a string",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "name": "array"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "kind": "constant",
    "name": "bin2String",
    "longname": "bin2String",
    "scope": "global",
    "async": true,
    "$longname": "bin2String"
  },
  {
    "comment": "/**\n             * Cache did not find file\n             */",
    "meta": {
      "range": [
        13351,
        13365
      ],
      "filename": "index.js",
      "lineno": 430,
      "columnno": 16,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100001029",
        "name": "cachedInstance"
      }
    },
    "description": "Cache did not find file",
    "name": "cachedInstance",
    "longname": "<anonymous>~cachedInstance",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": [],
    "$longname": "cachedInstance"
  },
  {
    "comment": "/**\n             * Cache did not find file\n             */",
    "meta": {
      "range": [
        19076,
        19090
      ],
      "filename": "index.js",
      "lineno": 567,
      "columnno": 16,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100001405",
        "name": "cachedInstance"
      }
    },
    "description": "Cache did not find file",
    "name": "cachedInstance",
    "longname": "<anonymous>~cachedInstance",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": [],
    "$longname": "cachedInstance"
  },
  {
    "comment": "/**\n * Caches a response given the request/URL\n * @param request {Request|string}\n * @param response {Response}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        4487,
        4817
      ],
      "filename": "index.js",
      "lineno": 169,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000322",
        "name": "cacheResponse",
        "type": "FunctionExpression"
      },
      "vars": {
        "url": "cacheResponse~url",
        "": null
      }
    },
    "description": "Caches a response given the request/URL",
    "params": [
      {
        "type": {
          "names": [
            "Request",
            "string"
          ]
        },
        "name": "request"
      },
      {
        "type": {
          "names": [
            "Response"
          ]
        },
        "name": "response"
      }
    ],
    "kind": "constant",
    "name": "cacheResponse",
    "longname": "cacheResponse",
    "scope": "global",
    "async": true,
    "$longname": "cacheResponse"
  },
  {
    "comment": "/**\n * Callbacks which are registered via the config class\n * @const\n * @default\n * @type {Array}\n */",
    "meta": {
      "range": [
        5820,
        5834
      ],
      "filename": "index.js",
      "lineno": 224,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000441",
        "name": "callbacks",
        "type": "ArrayExpression",
        "value": "[]"
      }
    },
    "description": "Callbacks which are registered via the config class",
    "kind": "constant",
    "defaultvalue": "[]",
    "defaultvaluetype": "array",
    "type": {
      "names": [
        "Array"
      ]
    },
    "name": "callbacks",
    "longname": "callbacks",
    "scope": "global",
    "params": [],
    "$longname": "callbacks",
    "$members": [
      {
        "comment": "/**\n * Provide cache and if not present provide fetch.\n * Does not update automatically\n * @param event {FetchEvent}\n * @returns {Promise.<Response>|*}\n */",
        "meta": {
          "range": [
            5993,
            7766
          ],
          "filename": "index.js",
          "lineno": 232,
          "columnno": 0,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000445",
            "name": "callbacks[\"cacheFirst\"]",
            "type": "FunctionExpression",
            "paramnames": [
              "event"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Provide cache and if not present provide fetch.\nDoes not update automatically",
        "params": [
          {
            "type": {
              "names": [
                "FetchEvent"
              ]
            },
            "name": "event"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Response>",
                "*"
              ]
            }
          }
        ],
        "name": "\"cacheFirst\"",
        "longname": "callbacks.\"cacheFirst\"",
        "kind": "function",
        "memberof": "callbacks",
        "scope": "static",
        "$longname": "callbacks.\"cacheFirst\""
      },
      {
        "comment": "/**\n * Network first strategy.\n * Since it fetches first-thing it won't need to update\n * @param event {FetchEvent}\n * @returns {Promise.<Response>|*}\n */",
        "meta": {
          "range": [
            7924,
            8565
          ],
          "filename": "index.js",
          "lineno": 290,
          "columnno": 0,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000586",
            "name": "callbacks[\"networkFirst\"]",
            "type": "FunctionExpression",
            "paramnames": [
              "event"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Network first strategy.\nSince it fetches first-thing it won't need to update",
        "params": [
          {
            "type": {
              "names": [
                "FetchEvent"
              ]
            },
            "name": "event"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Response>",
                "*"
              ]
            }
          }
        ],
        "name": "\"networkFirst\"",
        "longname": "callbacks.\"networkFirst\"",
        "kind": "function",
        "memberof": "callbacks",
        "scope": "static",
        "$longname": "callbacks.\"networkFirst\""
      },
      {
        "comment": "/**\n * Requests a file from the internet and checks if the cached config.VERSION is different\n * @param url {string}\n */",
        "meta": {
          "range": [
            10293,
            15736
          ],
          "filename": "index.js",
          "lineno": 354,
          "columnno": 0,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000821",
            "name": "callbacks[\"requestFileUpdate\"]",
            "type": "FunctionExpression",
            "paramnames": [
              "url"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Requests a file from the internet and checks if the cached config.VERSION is different",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "name": "url"
          }
        ],
        "name": "\"requestFileUpdate\"",
        "longname": "callbacks.\"requestFileUpdate\"",
        "kind": "function",
        "memberof": "callbacks",
        "scope": "static",
        "$longname": "callbacks.\"requestFileUpdate\""
      },
      {
        "comment": "/**\n * Requests the hash of a specific file from a specified URL via POST\n * @param url {string}\n */",
        "meta": {
          "range": [
            15840,
            21663
          ],
          "filename": "index.js",
          "lineno": 487,
          "columnno": 0,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100001181",
            "name": "callbacks[\"requestServerHash\"]",
            "type": "FunctionExpression",
            "paramnames": [
              "url"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Requests the hash of a specific file from a specified URL via POST",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "name": "url"
          }
        ],
        "name": "\"requestServerHash\"",
        "longname": "callbacks.\"requestServerHash\"",
        "kind": "function",
        "memberof": "callbacks",
        "scope": "static",
        "$longname": "callbacks.\"requestServerHash\""
      },
      {
        "comment": "/**\n * Stale while revalidate strategy.\n * Serve a, potentially, outdated file but then check for updates with a fallback to network\n * @param event {FetchEvent}\n * @returns {Promise.<Response>|*}\n */",
        "meta": {
          "range": [
            8769,
            10169
          ],
          "filename": "index.js",
          "lineno": 314,
          "columnno": 0,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000666",
            "name": "callbacks[\"staleWhileRevalidate\"]",
            "type": "FunctionExpression",
            "paramnames": [
              "event"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Stale while revalidate strategy.\nServe a, potentially, outdated file but then check for updates with a fallback to network",
        "params": [
          {
            "type": {
              "names": [
                "FetchEvent"
              ]
            },
            "name": "event"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "Promise.<Response>",
                "*"
              ]
            }
          }
        ],
        "name": "\"staleWhileRevalidate\"",
        "longname": "callbacks.\"staleWhileRevalidate\"",
        "kind": "function",
        "memberof": "callbacks",
        "scope": "static",
        "$longname": "callbacks.\"staleWhileRevalidate\""
      }
    ]
  },
  {
    "comment": "/**\n * Checks for a given URL if it is allowed to be cached\n * @param url {string}\n * @returns {Promise<boolean>}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        3102,
        3656
      ],
      "filename": "index.js",
      "lineno": 113,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000178",
        "name": "canBeCached",
        "type": "FunctionExpression"
      },
      "vars": {
        "whitelisted": "canBeCached~whitelisted",
        "blacklisted": "canBeCached~blacklisted",
        "regex": "canBeCached~regex"
      }
    },
    "description": "Checks for a given URL if it is allowed to be cached",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "url"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        }
      }
    ],
    "kind": "constant",
    "name": "canBeCached",
    "longname": "canBeCached",
    "scope": "global",
    "async": true,
    "$longname": "canBeCached"
  },
  {
    "comment": "/**\n * Checks if a given URL is allowed to be updated\n * @param url {string}\n * @returns {Promise<boolean>}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        3799,
        4340
      ],
      "filename": "index.js",
      "lineno": 141,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000250",
        "name": "canBeUpdated",
        "type": "FunctionExpression"
      },
      "vars": {
        "whitelisted": "canBeUpdated~whitelisted",
        "blacklisted": "canBeUpdated~blacklisted",
        "regex": "canBeUpdated~regex"
      }
    },
    "description": "Checks if a given URL is allowed to be updated",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "url"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        }
      }
    ],
    "kind": "constant",
    "name": "canBeUpdated",
    "longname": "canBeUpdated",
    "scope": "global",
    "async": true,
    "$longname": "canBeUpdated"
  },
  {
    "comment": "/**\n * Checks for updates\n * @const\n * @default\n */",
    "meta": {
      "range": [
        26215,
        26819
      ],
      "filename": "index.js",
      "lineno": 750,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100001984",
        "name": "checkUpdate",
        "type": "FunctionExpression"
      },
      "vars": {
        "isUpdating": "checkUpdate~isUpdating",
        "url": "checkUpdate~url",
        "": null,
        "checkUpdateTimeout": "checkUpdate~checkUpdateTimeout"
      }
    },
    "description": "Checks for updates",
    "kind": "constant",
    "name": "checkUpdate",
    "longname": "checkUpdate",
    "scope": "global",
    "params": [],
    "async": true,
    "$longname": "checkUpdate"
  },
  {
    "comment": "/**\n * Timeout register for checkUpdate.\n * Used to cancel it if fetch is received.\n * @type {null|number}\n */",
    "meta": {
      "range": [
        25936,
        25961
      ],
      "filename": "index.js",
      "lineno": 737,
      "columnno": 4,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100001976",
        "name": "checkUpdateTimeout",
        "type": "Literal",
        "value": null
      }
    },
    "description": "Timeout register for checkUpdate.\nUsed to cancel it if fetch is received.",
    "type": {
      "names": [
        "null",
        "number"
      ]
    },
    "name": "checkUpdateTimeout",
    "longname": "checkUpdateTimeout",
    "kind": "member",
    "scope": "global",
    "params": [],
    "$longname": "checkUpdateTimeout"
  },
  {
    "comment": "/**\n             * Cache did not find anything\n             */",
    "meta": {
      "range": [
        7134,
        7181
      ],
      "filename": "index.js",
      "lineno": 264,
      "columnno": 16,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000543",
        "name": "clonedReqForCache",
        "type": "CallExpression",
        "value": ""
      }
    },
    "description": "Cache did not find anything",
    "name": "clonedReqForCache",
    "longname": "<anonymous>~clonedReqForCache",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": [],
    "$longname": "clonedReqForCache"
  },
  {
    "comment": "/**\n                     * Cache response\n                     */",
    "meta": {
      "range": [
        6816,
        6860
      ],
      "filename": "index.js",
      "lineno": 253,
      "columnno": 24,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000526",
        "name": "clonedRespForCache",
        "type": "CallExpression",
        "value": ""
      }
    },
    "description": "Cache response",
    "name": "clonedRespForCache",
    "longname": "<anonymous>~clonedRespForCache",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": [],
    "$longname": "clonedRespForCache"
  },
  {
    "comment": "/**\n                     * Cache response\n                     */",
    "meta": {
      "range": [
        7543,
        7587
      ],
      "filename": "index.js",
      "lineno": 274,
      "columnno": 24,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000571",
        "name": "clonedRespForCache",
        "type": "CallExpression",
        "value": ""
      }
    },
    "description": "Cache response",
    "name": "clonedRespForCache",
    "longname": "<anonymous>~clonedRespForCache",
    "kind": "member",
    "memberof": "<anonymous>",
    "scope": "inner",
    "params": [],
    "$longname": "clonedRespForCache"
  },
  {
    "comment": "/**\n * The config to use\n * @type {Config}\n */",
    "meta": {
      "range": [
        1294,
        1300
      ],
      "filename": "index.js",
      "lineno": 35,
      "columnno": 4,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000015",
        "name": "config"
      }
    },
    "description": "The config to use",
    "type": {
      "names": [
        "Config"
      ]
    },
    "name": "config",
    "longname": "config",
    "kind": "member",
    "scope": "global",
    "params": [],
    "$longname": "config"
  },
  {
    "comment": "/**\n * Responds to a fetch event received\n * @param event {FetchEvent}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        26925,
        27768
      ],
      "filename": "index.js",
      "lineno": 776,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100002060",
        "name": "fetchEvent",
        "type": "FunctionExpression"
      },
      "vars": {
        "checkUpdateTimeout": "fetchEvent~checkUpdateTimeout",
        "": null
      }
    },
    "description": "Responds to a fetch event received",
    "params": [
      {
        "type": {
          "names": [
            "FetchEvent"
          ]
        },
        "name": "event"
      }
    ],
    "kind": "constant",
    "name": "fetchEvent",
    "longname": "fetchEvent",
    "scope": "global",
    "$longname": "fetchEvent"
  },
  {
    "comment": "/**\n * Fetches a request only if we may be online (since navigator.onLine is funky)\n * @param request {Request|string}\n * @param options {Object}\n * @returns {Promise<Response>|null}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        5035,
        5417
      ],
      "filename": "index.js",
      "lineno": 192,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000378",
        "name": "fetchResponse",
        "type": "FunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "description": "Fetches a request only if we may be online (since navigator.onLine is funky)",
    "params": [
      {
        "type": {
          "names": [
            "Request",
            "string"
          ]
        },
        "name": "request"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "options",
        "defaultvalue": null
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Response>",
            "null"
          ]
        }
      }
    ],
    "kind": "constant",
    "name": "fetchResponse",
    "longname": "fetchResponse",
    "scope": "global",
    "async": true,
    "$longname": "fetchResponse"
  },
  {
    "comment": "/**\n * Responds to an install event received.\n * Since install happens after page load, it is important not to be asyncroneous.\n * @param event {Event}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        21850,
        23291
      ],
      "filename": "index.js",
      "lineno": 631,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100001571",
        "name": "installEvent",
        "type": "FunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "description": "Responds to an install event received.\nSince install happens after page load, it is important not to be asyncroneous.",
    "params": [
      {
        "type": {
          "names": [
            "Event"
          ]
        },
        "name": "event"
      }
    ],
    "kind": "constant",
    "name": "installEvent",
    "longname": "installEvent",
    "scope": "global",
    "$longname": "installEvent"
  },
  {
    "comment": "/**\n * Whether it is currently updating. There may sometimes be multiple times this function is called,\n * so this should prevent weird behaviour\n * @type {boolean}\n */",
    "meta": {
      "range": [
        26136,
        26154
      ],
      "filename": "index.js",
      "lineno": 743,
      "columnno": 4,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100001980",
        "name": "isUpdating",
        "type": "Literal",
        "value": false
      }
    },
    "description": "Whether it is currently updating. There may sometimes be multiple times this function is called,\nso this should prevent weird behaviour",
    "type": {
      "names": [
        "boolean"
      ]
    },
    "name": "isUpdating",
    "longname": "isUpdating",
    "kind": "member",
    "scope": "global",
    "params": [],
    "$longname": "isUpdating"
  },
  {
    "comment": "/**\n * Hashes a file given its blob\n * @param blob {Blob}\n * @returns {Promise.<string>|*}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        2491,
        2953
      ],
      "filename": "index.js",
      "lineno": 89,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000118",
        "name": "md5HashBody",
        "type": "FunctionExpression"
      },
      "vars": {
        "": null
      }
    },
    "description": "Hashes a file given its blob",
    "params": [
      {
        "type": {
          "names": [
            "Blob"
          ]
        },
        "name": "blob"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<string>",
            "*"
          ]
        }
      }
    ],
    "kind": "constant",
    "name": "md5HashBody",
    "longname": "md5HashBody",
    "scope": "global",
    "$longname": "md5HashBody"
  },
  {
    "comment": "/**\n * Helper to merge configs\n * @param standard {Config}\n * @param user {Config}\n * @returns {Config}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        1542,
        2151
      ],
      "filename": "index.js",
      "lineno": 53,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000022",
        "name": "merge",
        "type": "FunctionExpression"
      },
      "vars": {
        "idx": "merge~idx",
        "standard[undefined]": null,
        "key": "merge~key",
        "callbacks[undefined]": null
      }
    },
    "description": "Helper to merge configs",
    "params": [
      {
        "type": {
          "names": [
            "Config"
          ]
        },
        "name": "standard"
      },
      {
        "type": {
          "names": [
            "Config"
          ]
        },
        "name": "user"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Config"
          ]
        }
      }
    ],
    "kind": "constant",
    "name": "merge",
    "longname": "merge",
    "scope": "global",
    "$longname": "merge"
  },
  {
    "comment": "/**\n * Posts a message to the currently connected client.\n * Used as \"Event handler\" for update events\n * @param type {number}\n * @param message {Object}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        5606,
        5709
      ],
      "filename": "index.js",
      "lineno": 214,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000424",
        "name": "postMessages",
        "type": "FunctionExpression"
      }
    },
    "description": "Posts a message to the currently connected client.\nUsed as \"Event handler\" for update events",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "message"
      }
    ],
    "kind": "constant",
    "name": "postMessages",
    "longname": "postMessages",
    "scope": "global",
    "async": true,
    "$longname": "postMessages"
  },
  {
    "comment": "/**\n * Onmessage handler for the worker interface.\n * You can register methods and set values via this method.\n * @see {@link https://l3tum.github.io/ServiceWorker/api/config|Github Pages} for more information.\n * @param message\n *\n * @example\n * Example of registering callback via postmessage\n *\n * mySw.postMessage({\n *  type: 2 <number>,\n *  name: function name <string>,\n *  method: an actual function stringified <function>\n * })\n *\n * @example\n * Example of changing config value via postmessage\n *\n * mySw.postMessage({\n *  type: 3 <number>,\n *  field: \"VERSION\" <string>,\n *  value: \"1.0.0\" <anything>\n * })\n */",
    "meta": {
      "range": [
        28650,
        29384
      ],
      "filename": "index.js",
      "lineno": 836,
      "columnno": 0,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100002182",
        "name": "self.onmessage",
        "type": "FunctionExpression",
        "paramnames": [
          "message"
        ]
      },
      "vars": {
        "data": "self.onmessage~data",
        "functions": "self.onmessage~functions",
        "callbacks[undefined]": null,
        "config.STRATEGY_CALLBACKS[undefined]": "config.STRATEGY_CALLBACKS[undefined]",
        "config.FETCH_CALLBACKS[undefined]": "config.FETCH_CALLBACKS[undefined]",
        "config.UPDATE_CALLBACKS[undefined]": "config.UPDATE_CALLBACKS[undefined]",
        "config[undefined]": null
      }
    },
    "description": "Onmessage handler for the worker interface.\nYou can register methods and set values via this method.",
    "see": [
      "{@link https://l3tum.github.io/ServiceWorker/api/config|Github Pages} for more information."
    ],
    "params": [
      {
        "name": "message"
      }
    ],
    "examples": [
      "Example of registering callback via postmessage\n\nmySw.postMessage({\n type: 2 <number>,\n name: function name <string>,\n method: an actual function stringified <function>\n})",
      "Example of changing config value via postmessage\n\nmySw.postMessage({\n type: 3 <number>,\n field: \"VERSION\" <string>,\n value: \"1.0.0\" <anything>\n})"
    ],
    "name": "onmessage",
    "longname": "self.onmessage",
    "kind": "function",
    "memberof": "self",
    "scope": "static",
    "$longname": "self.onmessage"
  },
  {
    "comment": "/**\n * Files queued for updating\n * @type {String[]}\n * @const\n * @default\n */",
    "meta": {
      "range": [
        1388,
        1403
      ],
      "filename": "index.js",
      "lineno": 43,
      "columnno": 6,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000018",
        "name": "updateable",
        "type": "ArrayExpression",
        "value": "[]"
      }
    },
    "description": "Files queued for updating",
    "type": {
      "names": [
        "Array.<String>"
      ]
    },
    "kind": "constant",
    "defaultvalue": "[]",
    "defaultvaluetype": "array",
    "name": "updateable",
    "longname": "updateable",
    "scope": "global",
    "params": [],
    "$longname": "updateable"
  }
]