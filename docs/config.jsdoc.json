[
  {
    "comment": "/**\r\n * Configuration\r\n */",
    "meta": {
      "range": [
        74,
        5051
      ],
      "filename": "config.js",
      "lineno": 8,
      "columnno": 0,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000002",
        "name": "Config",
        "type": "ClassDeclaration",
        "paramnames": []
      }
    },
    "classdesc": "Configuration",
    "name": "Config",
    "longname": "Config",
    "kind": "class",
    "scope": "global",
    "params": [],
    "$longname": "Config",
    "$members": [
      {
        "comment": "/**\r\n         * The cache name.\r\n         * Not really important, so it uses your website adress as default\r\n         * but you can set it to anything\r\n         * @type {string}\r\n         */",
        "meta": {
          "range": [
            592,
            634
          ],
          "filename": "config.js",
          "lineno": 28,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000022",
            "name": "this.CACHE_NAME",
            "type": "BinaryExpression",
            "value": "",
            "paramnames": []
          }
        },
        "description": "The cache name.\rNot really important, so it uses your website adress as default\rbut you can set it to anything",
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "CACHE_NAME",
        "longname": "Config#CACHE_NAME",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#CACHE_NAME"
      },
      {
        "comment": "/**\r\n         * Enables debug logs\r\n         * @type {boolean}\r\n         */",
        "meta": {
          "range": [
            358,
            379
          ],
          "filename": "config.js",
          "lineno": 20,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000016",
            "name": "this.developer",
            "type": "Literal",
            "value": true,
            "paramnames": []
          }
        },
        "description": "Enables debug logs",
        "type": {
          "names": [
            "boolean"
          ]
        },
        "name": "developer",
        "longname": "Config#developer",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#developer"
      },
      {
        "comment": "/**\r\n         * You can dynamically register callbacks by calling\r\n         * sw.postmessage(method, function)\r\n         * Method means the method of the request and function needs to be a valid function,\r\n         * which returns a Promise<Event> and accepts an event.\r\n         * Additionally, the function needs to be JSON stringified in order to work correctly, if you register it via postmessage.\r\n         * You can call other strategy callbacks in your own callback as well, though beware that they return a response and not a request.\r\n         * This is sort of a hook more than a callback.\r\n         * @type {{string:function}}\r\n         */",
        "meta": {
          "range": [
            3957,
            3982
          ],
          "filename": "config.js",
          "lineno": 108,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000082",
            "name": "this.FETCH_CALLBACKS",
            "type": "ObjectExpression",
            "value": "{}",
            "paramnames": []
          }
        },
        "description": "You can dynamically register callbacks by calling\rsw.postmessage(method, function)\rMethod means the method of the request and function needs to be a valid function,\rwhich returns a Promise<Event> and accepts an event.\rAdditionally, the function needs to be JSON stringified in order to work correctly, if you register it via postmessage.\rYou can call other strategy callbacks in your own callback as well, though beware that they return a response and not a request.\rThis is sort of a hook more than a callback.",
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "FETCH_CALLBACKS",
        "longname": "Config#FETCH_CALLBACKS",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#FETCH_CALLBACKS"
      },
      {
        "comment": "/**\r\n         * Enum for the different message types used for reporting\r\n         * @type {{}}\r\n         */",
        "meta": {
          "range": [
            4898,
            5040
          ],
          "filename": "config.js",
          "lineno": 138,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000112",
            "name": "this.MESSAGE_TYPES",
            "type": "ObjectExpression",
            "value": "{\"undefined\":\"methodToRegister\"}",
            "paramnames": []
          }
        },
        "description": "Enum for the different message types used for reporting",
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "MESSAGE_TYPES",
        "longname": "Config#MESSAGE_TYPES",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#MESSAGE_TYPES"
      },
      {
        "comment": "/**\r\n         * URLs to precache. Accepted are only fully qualified Strings of relative or absolute URLs\r\n         */",
        "meta": {
          "range": [
            1324,
            1343
          ],
          "filename": "config.js",
          "lineno": 49,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000045",
            "name": "this.PRE_CACHE",
            "type": "ArrayExpression",
            "value": "[]",
            "paramnames": []
          }
        },
        "description": "URLs to precache. Accepted are only fully qualified Strings of relative or absolute URLs",
        "name": "PRE_CACHE",
        "longname": "Config#PRE_CACHE",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#PRE_CACHE"
      },
      {
        "comment": "/**\r\n         * Strategy for the sw to use. Available are:\r\n         * 0: Network First,\r\n         * 1: Cache first,\r\n         * 2: Stale while revalidate\r\n         *\r\n         * While there may be more I don't really see the benefit of adding them.\r\n         * Cache only is basically cache first without checking for network connectivity.\r\n         * Network only is, in my opinion, the worst thing to do.\r\n         *\r\n         * If you want to add your own you can specify a callback in $STRATEGY_CALLBACKS\r\n         * @type {number}\r\n         */",
        "meta": {
          "range": [
            2905,
            2922
          ],
          "filename": "config.js",
          "lineno": 85,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000064",
            "name": "this.STRATEGY",
            "type": "Literal",
            "value": 2,
            "paramnames": []
          }
        },
        "description": "Strategy for the sw to use. Available are:\r0: Network First,\r1: Cache first,\r2: Stale while revalidate\r\rWhile there may be more I don't really see the benefit of adding them.\rCache only is basically cache first without checking for network connectivity.\rNetwork only is, in my opinion, the worst thing to do.\r\rIf you want to add your own you can specify a callback in $STRATEGY_CALLBACKS",
        "type": {
          "names": [
            "number"
          ]
        },
        "name": "STRATEGY",
        "longname": "Config#STRATEGY",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#STRATEGY"
      },
      {
        "comment": "/**\r\n         * Strategy callbacks by type.\r\n         * Make sure that they always return a Promise<Response>\r\n         * @type {{0: networkFirst, 1: cacheFirst, 2: staleWhileRevalidate}}\r\n         */",
        "meta": {
          "range": [
            3145,
            3284
          ],
          "filename": "config.js",
          "lineno": 92,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000070",
            "name": "this.STRATEGY_CALLBACKS",
            "type": "ObjectExpression",
            "value": "{\"undefined\":\"staleWhileRevalidate\"}",
            "paramnames": []
          }
        },
        "description": "Strategy callbacks by type.\rMake sure that they always return a Promise<Response>",
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "STRATEGY_CALLBACKS",
        "longname": "Config#STRATEGY_CALLBACKS",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#STRATEGY_CALLBACKS"
      },
      {
        "comment": "/**\r\n         * Blacklist for all files that should not be updated. Can contain RegExp or String.\r\n         * Accepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\r\n         * Generally best practice (IMO) would be to exclude all files that have a fixed config.VERSION,\r\n         * like jQuery and Bootstrap.\r\n         * This also saves a lot of overhead\r\n         * since these files are generally pretty big and take a lot of time to process.\r\n         * @type {string[]}\r\n         */",
        "meta": {
          "range": [
            2307,
            2333
          ],
          "filename": "config.js",
          "lineno": 70,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000058",
            "name": "this.UPDATE_BLACKLIST",
            "type": "ArrayExpression",
            "value": "[]",
            "paramnames": []
          }
        },
        "description": "Blacklist for all files that should not be updated. Can contain RegExp or String.\rAccepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\rGenerally best practice (IMO) would be to exclude all files that have a fixed config.VERSION,\rlike jQuery and Bootstrap.\rThis also saves a lot of overhead\rsince these files are generally pretty big and take a lot of time to process.",
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "name": "UPDATE_BLACKLIST",
        "longname": "Config#UPDATE_BLACKLIST",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#UPDATE_BLACKLIST"
      },
      {
        "comment": "/**\r\n         * This is the dictionary for the different strategies.\r\n         * You should add to it directly\r\n         */",
        "meta": {
          "range": [
            4594,
            4725
          ],
          "filename": "config.js",
          "lineno": 126,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000094",
            "name": "this.UPDATE_CALLBACKS",
            "type": "ObjectExpression",
            "value": "{\"undefined\":\"requestServerHash\"}",
            "paramnames": []
          }
        },
        "description": "This is the dictionary for the different strategies.\rYou should add to it directly",
        "name": "UPDATE_CALLBACKS",
        "longname": "Config#UPDATE_CALLBACKS",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#UPDATE_CALLBACKS"
      },
      {
        "comment": "/**\r\n         * Update strategy to use with stale while revalidate\r\n         *\r\n         * Available are:\r\n         *\r\n         * 0: No strategy\r\n         * 1: Request each file when it was retrieved from cache without slowing down response time\r\n         * 2: Server-request which uses POST: {url:string} to request the server to return a md5 hash of the file like {hash:string}\r\n         * @type {number}\r\n         */",
        "meta": {
          "range": [
            4424,
            4448
          ],
          "filename": "config.js",
          "lineno": 120,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000088",
            "name": "this.UPDATE_STRATEGY",
            "type": "Literal",
            "value": 1,
            "paramnames": []
          }
        },
        "description": "Update strategy to use with stale while revalidate\r\rAvailable are:\r\r0: No strategy\r1: Request each file when it was retrieved from cache without slowing down response time\r2: Server-request which uses POST: {url:string} to request the server to return a md5 hash of the file like {hash:string}",
        "type": {
          "names": [
            "number"
          ]
        },
        "name": "UPDATE_STRATEGY",
        "longname": "Config#UPDATE_STRATEGY",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#UPDATE_STRATEGY"
      },
      {
        "comment": "/**\r\n         * Whitelist for all files that should be updated. Can contain RegExp or String.\r\n         * Accepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\r\n         * Generally best practice is to allow all and then blacklist the ones you don't want\r\n         * @type {string[]}\r\n         */",
        "meta": {
          "range": [
            1703,
            1757
          ],
          "filename": "config.js",
          "lineno": 57,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000051",
            "name": "this.UPDATE_WHITELIST",
            "type": "ArrayExpression",
            "value": "[\".*\"]",
            "paramnames": []
          }
        },
        "description": "Whitelist for all files that should be updated. Can contain RegExp or String.\rAccepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\rGenerally best practice is to allow all and then blacklist the ones you don't want",
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "name": "UPDATE_WHITELIST",
        "longname": "Config#UPDATE_WHITELIST",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#UPDATE_WHITELIST"
      },
      {
        "comment": "/**\r\n         * These URLs won't be cached at all. You'll most likely want videos in there,\r\n         * since they can take up your cache space pretty quickly.\r\n         * Accepted are either Strings or RegExp and can contain any part of the URL or even the full URL.\r\n         * @type {string[]}\r\n         */",
        "meta": {
          "range": [
            1151,
            1184
          ],
          "filename": "config.js",
          "lineno": 44,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000039",
            "name": "this.URLS_TO_CACHE_BLACKLIST",
            "type": "ArrayExpression",
            "value": "[]",
            "paramnames": []
          }
        },
        "description": "These URLs won't be cached at all. You'll most likely want videos in there,\rsince they can take up your cache space pretty quickly.\rAccepted are either Strings or RegExp and can contain any part of the URL or even the full URL.",
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "name": "URLS_TO_CACHE_BLACKLIST",
        "longname": "Config#URLS_TO_CACHE_BLACKLIST",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#URLS_TO_CACHE_BLACKLIST"
      },
      {
        "comment": "/**\r\n         * These specify the URLs to cache (whitelist)\r\n         * @type {string[]}\r\n         */",
        "meta": {
          "range": [
            758,
            819
          ],
          "filename": "config.js",
          "lineno": 34,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000032",
            "name": "this.URLS_TO_CACHE_WHITELIST",
            "type": "ArrayExpression",
            "value": "[\".*\"]",
            "paramnames": []
          }
        },
        "description": "These specify the URLs to cache (whitelist)",
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "name": "URLS_TO_CACHE_WHITELIST",
        "longname": "Config#URLS_TO_CACHE_WHITELIST",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#URLS_TO_CACHE_WHITELIST"
      },
      {
        "comment": "/**\r\n         * VERSION. Change this if you want to do a force reload\r\n         * @type {string}\r\n         */",
        "meta": {
          "range": [
            238,
            260
          ],
          "filename": "config.js",
          "lineno": 14,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000010",
            "name": "this.VERSION",
            "type": "Literal",
            "value": "1.0.0",
            "paramnames": []
          }
        },
        "description": "VERSION. Change this if you want to do a force reload",
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "VERSION",
        "longname": "Config#VERSION",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#VERSION"
      }
    ],
    "$constructor": {
      "comment": "",
      "meta": {
        "range": [
          94,
          5048
        ],
        "filename": "config.js",
        "lineno": 9,
        "columnno": 4,
        "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
        "code": {
          "id": "astnode100000005",
          "name": "Config",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "undocumented": true,
      "name": "Config",
      "longname": "Config",
      "kind": "class",
      "scope": "global",
      "params": [],
      "$longname": "Config"
    }
  }
]