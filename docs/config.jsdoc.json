[
  {
    "comment": "/**\r\n * Configuration of the Service Worker.\r\n * You can register callbacks in their respective dictionaries, or\r\n * register them via postMessage.\r\n * You can add methods to the service worker via the METHODS object or via postMessage.\r\n *\r\n * The ServiceWorker contains a default configuration that is applicable for most simple websites.\r\n * For details on that look at the respective fields.\r\n * Generally simple fields will be replaced, while some objects/arrays will be merged.\r\n * @class\r\n *\r\n * @example\r\n * Example of registering callback via postmessage\r\n *\r\n * mySw.postMessage({\r\n *  type: 2 <number>,\r\n *  name: function name <string>,\r\n *  method: an actual function stringified <function>\r\n * })\r\n *\r\n * @example\r\n * Example of changing config value via postmessage\r\n *\r\n * mySw.postMessage({\r\n *  type: 3 <number>,\r\n *  field: \"VERSION\" <string>,\r\n *  value: \"1.0.0\" <anything>\r\n * })\r\n */",
    "meta": {
      "range": [
        953,
        7674
      ],
      "filename": "config.js",
      "lineno": 34,
      "columnno": 0,
      "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
      "code": {
        "id": "astnode100000002",
        "name": "Config",
        "type": "ClassDeclaration",
        "paramnames": []
      }
    },
    "classdesc": "Configuration of the Service Worker.\rYou can register callbacks in their respective dictionaries, or\rregister them via postMessage.\rYou can add methods to the service worker via the METHODS object or via postMessage.\r\rThe ServiceWorker contains a default configuration that is applicable for most simple websites.\rFor details on that look at the respective fields.\rGenerally simple fields will be replaced, while some objects/arrays will be merged.",
    "kind": "class",
    "examples": [
      "Example of registering callback via postmessage\r\rmySw.postMessage({\r type: 2 <number>,\r name: function name <string>,\r method: an actual function stringified <function>\r})",
      "Example of changing config value via postmessage\r\rmySw.postMessage({\r type: 3 <number>,\r field: \"VERSION\" <string>,\r value: \"1.0.0\" <anything>\r})"
    ],
    "name": "Config",
    "longname": "Config",
    "scope": "global",
    "description": "Constructor for the Config class",
    "params": [],
    "$longname": "Config",
    "$members": [
      {
        "comment": "/**\r\n         * The cache name.\r\n         * Not really important, so it uses your website adress as default\r\n         * but you can set it to anything\r\n         * @type {string}\r\n         * @default\r\n         */",
        "meta": {
          "range": [
            1614,
            1656
          ],
          "filename": "config.js",
          "lineno": 61,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000022",
            "name": "this.CACHE_NAME",
            "type": "BinaryExpression",
            "value": "",
            "paramnames": []
          }
        },
        "description": "The cache name.\rNot really important, so it uses your website adress as default\rbut you can set it to anything",
        "type": {
          "names": [
            "string"
          ]
        },
        "name": "CACHE_NAME",
        "longname": "Config#CACHE_NAME",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#CACHE_NAME"
      },
      {
        "comment": "/**\r\n         * Enables debug logs\r\n         * @type {boolean}\r\n         * @default\r\n         */",
        "meta": {
          "range": [
            1359,
            1380
          ],
          "filename": "config.js",
          "lineno": 52,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000016",
            "name": "this.developer",
            "type": "Literal",
            "value": true,
            "paramnames": []
          }
        },
        "description": "Enables debug logs",
        "type": {
          "names": [
            "boolean"
          ]
        },
        "defaultvalue": true,
        "name": "developer",
        "longname": "Config#developer",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#developer"
      },
      {
        "comment": "/**\r\n         * These are fetch hooks called when a fetch event was fired.\r\n         * They accept an Event and return an Event to be used further by the STRATEGY_CALLBACKS.\r\n         * The methods need to be registered in either METHODS or via postmessage.\r\n         * @type {{string:function}}\r\n         * @example\r\n         * async function(event){return new FetchEvent();}\r\n         */",
        "meta": {
          "range": [
            5837,
            5862
          ],
          "filename": "config.js",
          "lineno": 162,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000082",
            "name": "this.FETCH_CALLBACKS",
            "type": "ObjectExpression",
            "value": "{}",
            "paramnames": []
          }
        },
        "description": "These are fetch hooks called when a fetch event was fired.\rThey accept an Event and return an Event to be used further by the STRATEGY_CALLBACKS.\rThe methods need to be registered in either METHODS or via postmessage.",
        "type": {
          "names": [
            "Object"
          ]
        },
        "examples": [
          "async function(event){return new FetchEvent();}"
        ],
        "name": "FETCH_CALLBACKS",
        "longname": "Config#FETCH_CALLBACKS",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#FETCH_CALLBACKS"
      },
      {
        "comment": "/**\r\n         * The Server Adress used for 'requestServerHash'. Specify a valid relative or absolute URL\r\n         * which will accept an URL in POST and return a Hash.\r\n         * @type {string}\r\n         * @default\r\n         */",
        "meta": {
          "range": [
            7112,
            7142
          ],
          "filename": "config.js",
          "lineno": 197,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000106",
            "name": "this.HASH_ADDRESS",
            "type": "Literal",
            "value": "/gethash",
            "paramnames": []
          }
        },
        "description": "The Server Adress used for 'requestServerHash'. Specify a valid relative or absolute URL\rwhich will accept an URL in POST and return a Hash.",
        "type": {
          "names": [
            "string"
          ]
        },
        "defaultvalue": "/gethash",
        "name": "HASH_ADDRESS",
        "longname": "Config#HASH_ADDRESS",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#HASH_ADDRESS"
      },
      {
        "comment": "/**\r\n         * Enum for the different message types used for reporting\r\n         * @type {Object}\r\n         */",
        "meta": {
          "range": [
            7276,
            7451
          ],
          "filename": "config.js",
          "lineno": 203,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000112",
            "name": "this.MESSAGE_TYPES",
            "type": "ObjectExpression",
            "value": "{\"undefined\":\"fieldToChange\"}",
            "paramnames": []
          }
        },
        "description": "Enum for the different message types used for reporting",
        "type": {
          "names": [
            "Object"
          ]
        },
        "name": "MESSAGE_TYPES",
        "longname": "Config#MESSAGE_TYPES",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#MESSAGE_TYPES"
      },
      {
        "comment": "/**\r\n         * This will store the methods for the callbacks in stringified format.\r\n         * @type {Object}\r\n         * @example\r\n         * \"function(){}\"\r\n         */",
        "meta": {
          "range": [
            7646,
            7663
          ],
          "filename": "config.js",
          "lineno": 216,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000126",
            "name": "this.METHODS",
            "type": "ObjectExpression",
            "value": "{}",
            "paramnames": []
          }
        },
        "description": "This will store the methods for the callbacks in stringified format.",
        "type": {
          "names": [
            "Object"
          ]
        },
        "examples": [
          "\"function(){}\""
        ],
        "name": "METHODS",
        "longname": "Config#METHODS",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#METHODS"
      },
      {
        "comment": "/**\r\n         * URLs to precache. Accepted are only fully qualified Strings of relative or absolute URLs\r\n         * It will replace the default configuration.\r\n         * @type {string[]}\r\n         */",
        "meta": {
          "range": [
            2796,
            2815
          ],
          "filename": "config.js",
          "lineno": 92,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000045",
            "name": "this.PRE_CACHE",
            "type": "ArrayExpression",
            "value": "[]",
            "paramnames": []
          }
        },
        "description": "URLs to precache. Accepted are only fully qualified Strings of relative or absolute URLs\rIt will replace the default configuration.",
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "name": "PRE_CACHE",
        "longname": "Config#PRE_CACHE",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#PRE_CACHE"
      },
      {
        "comment": "/**\r\n         * Strategy for the sw to use. Available are:\r\n         * 0: Network First,\r\n         * 1: Cache first,\r\n         * 2: Stale while revalidate\r\n         *\r\n         * While there may be more I don't really see the benefit of adding them.\r\n         * Cache only is basically cache first without checking for network connectivity.\r\n         * Network only is, in my opinion, the worst thing to do, since you don't necessarily need a SW for that.\r\n         * And nobody can tell me you update something that often and it's that important.\r\n         *\r\n         * If you want to add your own you can specify a callback in $STRATEGY_CALLBACKS anyways,\r\n         * or register it via postMessage\r\n         * @type {number}\r\n         * @default\r\n         */",
        "meta": {
          "range": [
            4892,
            4909
          ],
          "filename": "config.js",
          "lineno": 138,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000064",
            "name": "this.STRATEGY",
            "type": "Literal",
            "value": 2,
            "paramnames": []
          }
        },
        "description": "Strategy for the sw to use. Available are:\r0: Network First,\r1: Cache first,\r2: Stale while revalidate\r\rWhile there may be more I don't really see the benefit of adding them.\rCache only is basically cache first without checking for network connectivity.\rNetwork only is, in my opinion, the worst thing to do, since you don't necessarily need a SW for that.\rAnd nobody can tell me you update something that often and it's that important.\r\rIf you want to add your own you can specify a callback in $STRATEGY_CALLBACKS anyways,\ror register it via postMessage",
        "type": {
          "names": [
            "number"
          ]
        },
        "defaultvalue": 2,
        "name": "STRATEGY",
        "longname": "Config#STRATEGY",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#STRATEGY"
      },
      {
        "comment": "/**\r\n         * Strategy callbacks which are called when a fetch event is fired.\r\n         * They accept an Event and return a Promise<Response>.\r\n         * The methods need to be registered in either METHODS or via postmessage.\r\n         * @type {Object}\r\n         * @example\r\n         * async function(event){return fetch(event.request);}\r\n         */",
        "meta": {
          "range": [
            5286,
            5425
          ],
          "filename": "config.js",
          "lineno": 148,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000070",
            "name": "this.STRATEGY_CALLBACKS",
            "type": "ObjectExpression",
            "value": "{\"undefined\":\"staleWhileRevalidate\"}",
            "paramnames": []
          }
        },
        "description": "Strategy callbacks which are called when a fetch event is fired.\rThey accept an Event and return a Promise<Response>.\rThe methods need to be registered in either METHODS or via postmessage.",
        "type": {
          "names": [
            "Object"
          ]
        },
        "examples": [
          "async function(event){return fetch(event.request);}"
        ],
        "name": "STRATEGY_CALLBACKS",
        "longname": "Config#STRATEGY_CALLBACKS",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#STRATEGY_CALLBACKS"
      },
      {
        "comment": "/**\r\n         * Blacklist for all files that should not be updated.\r\n         * Accepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\r\n         * Generally best practice (IMO) would be to exclude all files that have a fixed config.VERSION,\r\n         * like jQuery and Bootstrap.\r\n         * This also saves a lot of overhead since these files are generally pretty big and take a lot of time to process.\r\n         * Will merge with the default configuration.\r\n         * The Strings will be converted into regular expressions.\r\n         * @type {string[]}\r\n         *\r\n         * @example \".*\" will be RegExp(\".*\", \"gi\")\r\n         */",
        "meta": {
          "range": [
            4081,
            4107
          ],
          "filename": "config.js",
          "lineno": 120,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000058",
            "name": "this.UPDATE_BLACKLIST",
            "type": "ArrayExpression",
            "value": "[]",
            "paramnames": []
          }
        },
        "description": "Blacklist for all files that should not be updated.\rAccepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\rGenerally best practice (IMO) would be to exclude all files that have a fixed config.VERSION,\rlike jQuery and Bootstrap.\rThis also saves a lot of overhead since these files are generally pretty big and take a lot of time to process.\rWill merge with the default configuration.\rThe Strings will be converted into regular expressions.",
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "examples": [
          "\".*\" will be RegExp(\".*\", \"gi\")"
        ],
        "name": "UPDATE_BLACKLIST",
        "longname": "Config#UPDATE_BLACKLIST",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#UPDATE_BLACKLIST"
      },
      {
        "comment": "/**\r\n         * These are the update callbacks which will be called depending on UPDATE_STRATEGY.\r\n         * You can add to them directly or register a callback via postMessage.\r\n         * The methods need to be registered in either METHODS or via postmessage.\r\n         * @type {Object}\r\n         * @example\r\n         * async function(url){}\r\n         */",
        "meta": {
          "range": [
            6729,
            6860
          ],
          "filename": "config.js",
          "lineno": 185,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000094",
            "name": "this.UPDATE_CALLBACKS",
            "type": "ObjectExpression",
            "value": "{\"undefined\":\"requestServerHash\"}",
            "paramnames": []
          }
        },
        "description": "These are the update callbacks which will be called depending on UPDATE_STRATEGY.\rYou can add to them directly or register a callback via postMessage.\rThe methods need to be registered in either METHODS or via postmessage.",
        "type": {
          "names": [
            "Object"
          ]
        },
        "examples": [
          "async function(url){}"
        ],
        "name": "UPDATE_CALLBACKS",
        "longname": "Config#UPDATE_CALLBACKS",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#UPDATE_CALLBACKS"
      },
      {
        "comment": "/**\r\n         * Update strategy to use with stale while revalidate\r\n         *\r\n         * Available are:\r\n         *\r\n         * 0: No strategy\r\n         * 1: Request each file when it was retrieved from cache without slowing down response time\r\n         * 2: Server-request which uses POST: {url:string} to request the server to return a md5 hash of the file like {hash:string}\r\n         * @type {number}\r\n         * @default\r\n         */",
        "meta": {
          "range": [
            6325,
            6349
          ],
          "filename": "config.js",
          "lineno": 175,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000088",
            "name": "this.UPDATE_STRATEGY",
            "type": "Literal",
            "value": 1,
            "paramnames": []
          }
        },
        "description": "Update strategy to use with stale while revalidate\r\rAvailable are:\r\r0: No strategy\r1: Request each file when it was retrieved from cache without slowing down response time\r2: Server-request which uses POST: {url:string} to request the server to return a md5 hash of the file like {hash:string}",
        "type": {
          "names": [
            "number"
          ]
        },
        "defaultvalue": 1,
        "name": "UPDATE_STRATEGY",
        "longname": "Config#UPDATE_STRATEGY",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#UPDATE_STRATEGY"
      },
      {
        "comment": "/**\r\n         * Whitelist for all files that should be updated.\r\n         * Accepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\r\n         * Generally best practice is to allow all and then blacklist the ones you don't want.\r\n         * Will replace the default configuration.\r\n         * The Strings will be converted into regular expressions.\r\n         * @type {string[]}\r\n         *\r\n         * @example \".*\" will be RegExp(\".*\", \"gi\")\r\n         */",
        "meta": {
          "range": [
            3331,
            3385
          ],
          "filename": "config.js",
          "lineno": 104,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000051",
            "name": "this.UPDATE_WHITELIST",
            "type": "ArrayExpression",
            "value": "[\".*\"]",
            "paramnames": []
          }
        },
        "description": "Whitelist for all files that should be updated.\rAccepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\rGenerally best practice is to allow all and then blacklist the ones you don't want.\rWill replace the default configuration.\rThe Strings will be converted into regular expressions.",
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "examples": [
          "\".*\" will be RegExp(\".*\", \"gi\")"
        ],
        "name": "UPDATE_WHITELIST",
        "longname": "Config#UPDATE_WHITELIST",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#UPDATE_WHITELIST"
      },
      {
        "comment": "/**\r\n         * These URLs won't be cached at all. You'll most likely want videos in there,\r\n         * since they can take up your cache space pretty quickly.\r\n         * It will be merged with the default configuration.\r\n         * The Strings will be converted into regular expressions in order to simplify the configuration.\r\n         * @type {string[]}\r\n         *\r\n         * @example \".*\" will be RegExp(\".*\", \"gi\")\r\n         */",
        "meta": {
          "range": [
            2539,
            2572
          ],
          "filename": "config.js",
          "lineno": 85,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000039",
            "name": "this.URLS_TO_CACHE_BLACKLIST",
            "type": "ArrayExpression",
            "value": "[]",
            "paramnames": []
          }
        },
        "description": "These URLs won't be cached at all. You'll most likely want videos in there,\rsince they can take up your cache space pretty quickly.\rIt will be merged with the default configuration.\rThe Strings will be converted into regular expressions in order to simplify the configuration.",
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "examples": [
          "\".*\" will be RegExp(\".*\", \"gi\")"
        ],
        "name": "URLS_TO_CACHE_BLACKLIST",
        "longname": "Config#URLS_TO_CACHE_BLACKLIST",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#URLS_TO_CACHE_BLACKLIST"
      },
      {
        "comment": "/**\r\n         * These specify the URLs to cache (whitelist).\r\n         * It will replace the default configuration.\r\n         * The Strings will be converted into regular expressions in order to\r\n         * simplify the configuration.\r\n         * @type {string[]}\r\n         *\r\n         * @example \".*\" will be RegExp(\".*\", \"gi\")\r\n         */",
        "meta": {
          "range": [
            2020,
            2081
          ],
          "filename": "config.js",
          "lineno": 72,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000032",
            "name": "this.URLS_TO_CACHE_WHITELIST",
            "type": "ArrayExpression",
            "value": "[\".*\"]",
            "paramnames": []
          }
        },
        "description": "These specify the URLs to cache (whitelist).\rIt will replace the default configuration.\rThe Strings will be converted into regular expressions in order to\rsimplify the configuration.",
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "examples": [
          "\".*\" will be RegExp(\".*\", \"gi\")"
        ],
        "name": "URLS_TO_CACHE_WHITELIST",
        "longname": "Config#URLS_TO_CACHE_WHITELIST",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#URLS_TO_CACHE_WHITELIST"
      },
      {
        "comment": "/**\r\n         * VERSION. Change this if you want to do a force reload\r\n         * @type {string}\r\n         * @default\r\n         */",
        "meta": {
          "range": [
            1218,
            1240
          ],
          "filename": "config.js",
          "lineno": 45,
          "columnno": 8,
          "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
          "code": {
            "id": "astnode100000010",
            "name": "this.VERSION",
            "type": "Literal",
            "value": "1.0.0",
            "paramnames": []
          }
        },
        "description": "VERSION. Change this if you want to do a force reload",
        "type": {
          "names": [
            "string"
          ]
        },
        "defaultvalue": "1.0.0",
        "name": "VERSION",
        "longname": "Config#VERSION",
        "kind": "member",
        "memberof": "Config",
        "scope": "instance",
        "$longname": "Config#VERSION"
      }
    ],
    "$constructor": {
      "comment": "/**\r\n     * Constructor for the Config class\r\n     * @constructor\r\n     */",
      "meta": {
        "range": [
          1053,
          7671
        ],
        "filename": "config.js",
        "lineno": 39,
        "columnno": 4,
        "path": "C:\\Users\\Tom\\PhpstormProjects\\ServiceWorker\\src",
        "code": {
          "id": "astnode100000005",
          "name": "Config",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Constructor for the Config class",
      "kind": "class",
      "name": "Config",
      "longname": "Config",
      "scope": "global",
      "params": [],
      "undocumented": true,
      "$longname": "Config"
    }
  }
]