{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 471d3a2332a3f3097ae9","webpack:///./src/index.js","webpack:///./src/md5.js","webpack:///./src/localforage.js","webpack:///./src/config.js"],"names":[],"mappings":"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","file":"sw.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sw\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sw\"] = factory();\n\telse\n\t\troot[\"sw\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"C:\\\\Users\\\\Tom\\\\PhpstormProjects\\\\ServiceWorker/lib\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 471d3a2332a3f3097ae9","/**\n * Created by Tom on 01.11.2017.\n */\n/**\n * @license MIT License\n\n Copyright (c) 2017 Tom \"L3tum\" Pauly\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\nimport md5 from \"md5\";\nimport localforage from \"localforage\";\nimport Config from \"config\";\n\n/**\n * The config to use\n */\nvar config;\n\n/**\n * Files queued for updating\n * @type {String[]}\n */\nconst updateable = [];\n\n/**\n * Helper to merge configs\n * @param standard {Config}\n * @param user {Config}\n * @returns {Config}\n */\nconst merge = function (standard, user) {\n    for (let idx in user) {\n        if (idx === \"URLS_TO_CACHE_BLACKLIST\" || idx === \"UPDATE_BLACKLIST\") {\n            standard[idx] = standard[idx].concat(user[idx]);\n        } else if (idx === \"METHODS\") {\n            for (let key in user[\"METHODS\"]) {\n                if (user[\"METHODS\"].hasOwnProperty(key)) {\n                    // eslint-disable-next-line no-new-func\n                    callbacks[key] = new Function(user[\"METHODS\"][key]);\n                }\n            }\n        } else {\n            standard[idx] = user[idx];\n        }\n    }\n    return standard;\n};\n\n/**\n * Converts a byte array to a string\n * @param array {[]}\n * @returns {*}\n */\nconst bin2String = async function (array) {\n    return String.fromCharCode.apply(String, array);\n};\n\n/**\n * Hashes a file given its blob\n * @param blob {Blob}\n * @returns {Promise.<string>|*}\n */\nconst md5HashBody = function (blob) {\n    return new Promise(function (resolve, reject) {\n        let arrayBuffer;\n        let fileReader = new FileReader();\n\n        fileReader.onloadend = async function () {\n            arrayBuffer = this.result;\n            bin2String(arrayBuffer).then(async function (result) {\n                let hash = md5(result);\n\n                resolve(hash);\n            });\n        };\n        fileReader.readAsArrayBuffer(blob);\n    });\n};\n\n/**\n * Checks for a given URL if it is allowed to be cached\n * @param url\n * @returns {Promise<boolean>}\n */\nconst canBeCached = async function (url) {\n    let whitelisted = false;\n    let blacklisted = false;\n\n    for (let regex of config.URLS_TO_CACHE_WHITELIST) {\n        if (url.match(new RegExp(regex, \"gi\")) !== null) {\n            whitelisted = true;\n            break;\n        }\n    }\n    if (whitelisted) {\n        for (let regex of config.URLS_TO_CACHE_BLACKLIST) {\n            if (url.match(new RegExp(regex, \"gi\")) !== null) {\n                blacklisted = true;\n                break;\n            }\n        }\n    }\n    return whitelisted && !blacklisted;\n};\n\n/**\n * Checks if a given URL is allowed to be updated\n * @param url\n * @returns {Promise<boolean>}\n */\nconst canBeUpdated = async function (url) {\n    let whitelisted = false;\n    let blacklisted = false;\n\n    for (let regex of config.UPDATE_WHITELIST) {\n        if (url.match(new RegExp(regex, \"gi\")) !== null) {\n            whitelisted = true;\n            break;\n        }\n    }\n    if (whitelisted) {\n        for (let regex of config.UPDATE_BLACKLIST) {\n            if (url.match(new RegExp(regex, \"gi\")) !== null) {\n                blacklisted = true;\n                break;\n            }\n        }\n    }\n    return whitelisted && !blacklisted;\n};\n\n/**\n * Caches a response given the request/URL\n * @param request {Request|string}\n * @param response {Response}\n */\nconst cacheResponse = async function (request, response) {\n    let url;\n\n    if (request.url) {\n        url = request.url;\n    } else {\n        url = request;\n    }\n    if (canBeCached(url)) {\n        caches.open(config.CACHE_NAME + config.VERSION).then(async function (cache) {\n            cache.put(url, response);\n        });\n    }\n};\n\n/**\n * Fetches a request only if we may be online (since navigator.onLine is funky)\n * @param request {Request|string}\n * @param options {{}}\n * @returns {Promise<Response>|null}\n */\nconst fetchResponse = async function (request, options = null) {\n    if (navigator.onLine) {\n        if (options !== null) {\n            return fetch(request, options).then(async function (response) {\n                return response;\n            });\n        }\n        return fetch(request).then(async function (response) {\n            return response;\n        });\n    }\n    return null;\n};\n\nconst postMessages = async function (type, message) {\n    self.postMessage({type: type, message: message});\n};\n\nconst callbacks = [];\n\n/**\n * Provide cache and if not present provide fetch.\n * Does not update automatically\n * @param event {Event}\n * @returns {Promise.<Response>|*}\n */\ncallbacks[\"cacheFirst\"] = function (event) {\n    return (async(event) => {\n        let clonedReqForNetwork = event.request.clone();\n\n        return caches.match(event.request.url).then(function (matched) {\n            /**\n             * Check if valid response from cache\n             */\n            if (matched !== null && matched.type !== \"error\") {\n                return matched;\n            }\n            let clonedReqForCache = clonedReqForNetwork.clone();\n\n            return fetchResponse(clonedReqForNetwork.url).then(function (networkResponse) {\n                /**\n                 * Check if cacheable\n                 */\n                if (networkResponse !== null && networkResponse !== \"error\") {\n                    /**\n                     * Cache response\n                     */\n                    let clonedRespForCache = networkResponse.clone();\n\n                    cacheResponse(clonedReqForCache, clonedRespForCache);\n                }\n                return networkResponse;\n            });\n        }).catch(function () {\n            /**\n             * Cache did not find anything\n             */\n\n            let clonedReqForCache = clonedReqForNetwork.clone();\n\n            return fetchResponse(clonedReqForNetwork.url).then(function (networkResponse) {\n                /**\n                 * Check if cacheable\n                 */\n                if (networkResponse !== null && networkResponse !== \"error\") {\n                    /**\n                     * Cache response\n                     */\n                    let clonedRespForCache = networkResponse.clone();\n\n                    cacheResponse(clonedReqForCache, clonedRespForCache);\n                }\n                return networkResponse;\n            });\n        });\n    })(event);\n};\n\n/**\n * Network first strategy.\n * Since it fetches first-thing it won't need to update\n * @param event\n * @returns {Promise.<Response>|*}\n */\ncallbacks[\"networkFirst\"] = function (event) {\n    return (async(event) => {\n        let clonedReqForCache = event.request.clone();\n\n        return fetchResponse(event.request.url).then(function (networkResponse) {\n            if (networkResponse !== null && networkResponse.type !== \"error\") {\n                let clonedRespForReturn = networkResponse.clone();\n\n                cacheResponse(clonedReqForCache, networkResponse);\n                return clonedRespForReturn;\n            }\n            return caches.match(event.request.url).then(function (matched) {\n                return matched;\n            });\n        });\n    })(event);\n};\n\n/**\n * Stale while revalidate strategy.\n * Serve a, potentially, outdated file but then check for updates with a fallback to network\n * @param event\n * @returns {Promise.<Response>|*}\n */\ncallbacks[\"staleWhileRevalidate\"] = function (event) {\n    return (async(event) => {\n        let clonedReqForNetwork = event.request.clone();\n\n        return caches.match(event.request.url).then(function (matched) {\n            if (matched && matched.type !== \"error\") {\n                /**\n                 * Update\n                 */\n                updateable.push(event.request.url);\n                if (checkUpdateTimeout === null) {\n                    checkUpdateTimeout = setTimeout(checkUpdate, 500);\n                }\n                return matched;\n            }\n            return fetchResponse(event.request.url).then(function (networkResponse) {\n                if (networkResponse !== null && networkResponse.type !== \"error\") {\n                    let clonedForCache = networkResponse.clone();\n\n                    cacheResponse(clonedReqForNetwork, clonedForCache);\n                }\n                return networkResponse;\n            });\n        }).catch(function () {\n            return fetchResponse(event.request.url).then(function (networkResponse) {\n                if (networkResponse !== null && networkResponse.type !== \"error\") {\n                    let clonedForCache = networkResponse.clone();\n\n                    cacheResponse(clonedReqForNetwork, clonedForCache);\n                }\n                return networkResponse;\n            });\n        });\n    })(event);\n};\n\n/**\n * Requests a file from the internet and checks if the cached config.VERSION is different\n * @param url {string}\n */\ncallbacks[\"requestFileUpdate\"] = function (url) {\n    return (async(url) => {\n        caches.match(url).then(async function (cachedInstance) {\n            /**\n             * Is not cached for some reason\n             */\n            if (!cachedInstance || cachedInstance.type === \"error\") {\n                let abort = false;\n\n                /**\n                 * Remove from database to prevent duplicates\n                 */\n                localforage.removeItem(url);\n                /**\n                 * Fetch file to store in cache\n                 */\n                await fetchResponse(url).then(function (networkResponse) {\n                    /**\n                     * Check for valid response\n                     */\n                    if (networkResponse && networkResponse.type !== \"error\") {\n                        cachedInstance = networkResponse.clone();\n                        cacheResponse(url, networkResponse);\n                    } else {\n                        /**\n                         * File is something else, just leave it\n                         */\n                        abort = true;\n                    }\n                });\n                if (abort) {\n                    return;\n                }\n            }\n            localforage.getItem(url).then(function (value) {\n                /**\n                 * Doesn't have value yet, hash it and finished\n                 */\n                if (value === null) {\n                    cachedInstance.blob().then(function (blob) {\n                        md5HashBody(blob).then(function (hash) {\n                            localforage.setItem(url, hash);\n                        });\n                    });\n                } else {\n                    /**\n                     * Fetch newest file and check for updates\n                     */\n                    fetchResponse(url).then(function (networkResponse) {\n                        /**\n                         * Check if we received valid file\n                         */\n                        if (networkResponse && networkResponse.type !== \"error\") {\n                            let clonedResponse = networkResponse.clone();\n\n                            networkResponse.blob().then(function (blob) {\n                                md5HashBody(blob).then(function (hash) {\n                                    /**\n                                     * File got updated\n                                     */\n                                    if (hash !== value) {\n                                        cacheResponse(url, clonedResponse);\n                                        localforage.setItem(url, hash);\n                                        postMessages(0, {file: url});\n                                    }\n                                });\n                            });\n                        }\n                    });\n                }\n            });\n        }).catch(async function () {\n            /**\n             * Cache did not find file\n             */\n\n            let cachedInstance;\n\n            fetchResponse(url).then(function (networkResponse) {\n                /**\n                 * Check for valid response\n                 */\n                if (networkResponse && networkResponse.type !== \"error\") {\n                    cachedInstance = networkResponse.clone();\n                    cacheResponse(url, networkResponse);\n\n                    localforage.getItem(url).then(function (value) {\n                        /**\n                         * Doesn't have value yet, hash it and finished\n                         */\n                        if (value === null) {\n                            cachedInstance.blob().then(function (blob) {\n                                md5HashBody(blob).then(function (hash) {\n                                    localforage.setItem(url, hash);\n                                });\n                            });\n                        } else {\n                            /**\n                             * Fetch newest file and check for updates\n                             */\n                            fetchResponse(url).then(function (networkResponse) {\n                                /**\n                                 * Check if we received valid file\n                                 */\n                                if (networkResponse && networkResponse.type !== \"error\") {\n                                    let clonedResponse = networkResponse.clone();\n\n                                    networkResponse.blob().then(function (blob) {\n                                        md5HashBody(blob).then(function (hash) {\n                                            /**\n                                             * File got updated\n                                             */\n                                            if (hash !== value) {\n                                                cacheResponse(url, clonedResponse);\n                                                localforage.setItem(url, hash);\n                                                postMessages(0, {file: url});\n                                            }\n                                        });\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    })(url);\n};\n\n/**\n * Requests the hash of a specific file from a specified URL via POST\n * @param url\n */\ncallbacks[\"requestServerHash\"] = function (url) {\n    return (async(url) => {\n        caches.match(url).then(async function (cachedInstance) {\n            /**\n             * Is not cached for some reason\n             */\n            if (!cachedInstance || cachedInstance.type === \"error\") {\n                let abort = false;\n\n                /**\n                 * Remove from database to prevent duplicates\n                 */\n                localforage.removeItem(url);\n                /**\n                 * Fetch file to store in cache\n                 */\n                await fetchResponse(url).then(function (networkResponse) {\n                    /**\n                     * Check for valid response\n                     */\n                    if (networkResponse && networkResponse.type !== \"error\") {\n                        cachedInstance = networkResponse.clone();\n                        cacheResponse(url, networkResponse);\n                    } else {\n                        /**\n                         * File is something else, just leave it\n                         */\n                        abort = true;\n                    }\n                });\n                if (abort) {\n                    return;\n                }\n            }\n            localforage.getItem(url).then(function (value) {\n                /**\n                 * Doesn't have value yet, hash it and finished\n                 */\n                if (value === null) {\n                    cachedInstance.blob().then(function (blob) {\n                        md5HashBody(blob).then(function (hash) {\n                            localforage.setItem(url, hash);\n                        });\n                    });\n                } else {\n                    /**\n                     * Fetch newest hash from server\n                     */\n                    fetchResponse(config.HASH_ADDRESS, {\n                        method: \"POST\",\n                        headers: {\n                            \"Accept\": \"application/json\",\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify({\n                            url: url\n                        })\n                    }).then(async function (response) {\n                        response.json().then(function (json) {\n                            /**\n                             * Hash is different, fetch file and update caches/database\n                             */\n                            if (json.hash !== value) {\n                                fetchResponse(url).then(function (response) {\n                                    if (response && response.type !== \"error\") {\n                                        cacheResponse(url, response);\n                                        localforage.setItem(url, json.hash);\n                                        postMessages(0, {file: url});\n                                    }\n                                });\n                            }\n                        });\n                    });\n                }\n            });\n        }).catch(async function () {\n            /**\n             * Cache did not find file\n             */\n\n            let cachedInstance;\n\n            fetchResponse(url).then(function (networkResponse) {\n                /**\n                 * Check for valid response\n                 */\n                if (networkResponse && networkResponse.type !== \"error\") {\n                    cachedInstance = networkResponse.clone();\n                    cacheResponse(url, networkResponse);\n\n                    localforage.getItem(url).then(function (value) {\n                        /**\n                         * Doesn't have value yet, hash it and finished\n                         */\n                        if (value === null) {\n                            cachedInstance.blob().then(function (blob) {\n                                md5HashBody(blob).then(function (hash) {\n                                    localforage.setItem(url, hash);\n                                });\n                            });\n                        } else {\n                            /**\n                             * Fetch newest hash from server\n                             */\n                            fetchResponse(url, {\n                                method: \"POST\",\n                                headers: {\n                                    \"Accept\": \"application/json\",\n                                    \"Content-Type\": \"application/json\"\n                                },\n                                body: JSON.stringify({\n                                    url: url\n                                })\n                            }).then(async function (response) {\n                                response.json().then(function (json) {\n                                    /**\n                                     * Hash is different, fetch file and update caches/database\n                                     */\n                                    if (json.hash !== value) {\n                                        fetchResponse(url).then(function (response) {\n                                            if (response && response.type !== \"error\") {\n                                                cacheResponse(url, response);\n                                                localforage.setItem(url, json.hash);\n                                                postMessages(0, {file: url});\n                                            }\n                                        });\n                                    }\n                                });\n                            });\n                        }\n                    });\n                }\n            });\n        });\n    })(url);\n};\n\n/**\n * Responds to an install event received.\n * Since install happens after page load, it is important not to be asyncroneous.\n * @param event\n */\nconst installEvent = function (event) {\n    event.waitUntil(async function () {\n        /**\n         * Download settings first...\n         */\n        await fetch(\"sw_config.json\").then(async function (jsonConfig) {\n            await jsonConfig.json().then(async function (json) {\n                config = merge(new Config(), json.config);\n            });\n        });\n        console.log(\"Installed Service Worker v\" + config.VERSION);\n        if (config.developer) {\n            console.log(\"[ServiceWorker] Deleting Caches...\");\n        }\n        /**\n         * Delete all caches as safety measure\n         */\n        await caches.keys().then(async function (keys) {\n            for (let i = 0; i < keys.length; i++) {\n                await caches.delete(keys[i]);\n            }\n        }).then(async function () {\n            if (config.developer) {\n                console.log(\"[ServiceWorker] Precaching...\");\n            }\n            for (let i = 0; i < config.PRE_CACHE.length; i++) {\n                /**\n                 * Add all precache files\n                 */\n                fetchResponse(config.PRE_CACHE[i]).then(async function (response) {\n                    cacheResponse(config.PRE_CACHE[i], response);\n                });\n            }\n        }).then(function () {\n            if (config.developer) {\n                console.log(\"[ServiceWorker] Done!\");\n            }\n            self.skipWaiting();\n        });\n    }());\n};\n\n/**\n * This is called every time the page is loaded. Therefore, we want to keep it lightweight\n * @param event\n */\nconst activateEvent = function (event) {\n    /**\n     * Check for config updates\n     */\n    fetch(\"sw_config.json\").then(async function (jsonConfig) {\n        let clone = jsonConfig.clone();\n\n        jsonConfig.blob().then(async function (blob) {\n            md5HashBody(blob).then(async function (hash) {\n                localforage.getItem(\"sw_config.json\").then(async function (value) {\n                    if (value === null) {\n                        localforage.setItem(\"sw_config.json\", hash);\n                    } else if (value !== hash) {\n                        if (config.developer) {\n                            console.log(\"[ServiceWorker] Received Config Update!\");\n                        }\n                        await clone.json().then(async function (json) {\n                            config = merge(new Config(), json.config);\n                        });\n                        localforage.setItem(\"sw_config.json\", hash);\n                        /**\n                         * Delete all caches as safety measure\n                         */\n                        await caches.keys().then(async function (keys) {\n                            for (let i = 0; i < keys.length; i++) {\n                                await caches.delete(keys[i]);\n                            }\n                        }).then(async function () {\n                            if (config.developer) {\n                                console.log(\"[ServiceWorker] Precaching...\");\n                            }\n                            for (let i = 0; i < config.PRE_CACHE.length; i++) {\n                                /**\n                                 * Add all precache files\n                                 */\n                                fetchResponse(config.PRE_CACHE[i]).then(async function (response) {\n                                    cacheResponse(config.PRE_CACHE[i], response);\n                                });\n                            }\n                        }).then(function () {\n                            if (config.developer) {\n                                console.log(\"[ServiceWorker] Done!\");\n                            }\n                            postMessages(1, {});\n                        });\n                    }\n                });\n            });\n        });\n    });\n    console.log(\"[ServiceWorker] Active and Ready!\");\n};\n\nlet checkUpdateTimeout = null;\n/**\n * Whether it is currently updating. There may sometimes be multiple times this function is called,\n * so this should prevent weird behaviour\n * @type {boolean}\n */\nlet isUpdating = false;\n\n/**\n * Checks for updates\n */\nconst checkUpdate = async function () {\n    if (config.UPDATE_STRATEGY !== 0) {\n        if (!isUpdating) {\n            isUpdating = true;\n            if (updateable.length > 0) {\n                let url = updateable[0];\n\n                updateable.splice(0, 1);\n                canBeUpdated(url).then(async function (result) {\n                    if (result) {\n                        callbacks[config.UPDATE_CALLBACKS[config.UPDATE_STRATEGY]](url);\n                    }\n                });\n            }\n            isUpdating = false;\n        }\n    }\n    checkUpdateTimeout = setTimeout(checkUpdate, 500);\n};\n\n/**\n * Responds to a fetch event received\n * @param event\n */\nconst fetchEvent = function (event) {\n    /**\n     * Delay update interval by 500ms to handle request\n     */\n    if (checkUpdateTimeout !== null) {\n        clearTimeout(checkUpdateTimeout);\n        checkUpdateTimeout = setTimeout(checkUpdate, 500);\n    }\n    event.respondWith(async function () {\n        // eslint-disable-next-line no-debugger\n        if (config.FETCH_CALLBACKS.length > 0 && config.FETCH_CALLBACKS[event.request.method]) {\n            return callbacks[config.FETCH_CALLBACKS[event.request.method]](event).then(async function (newEvent) {\n                return callbacks[config.STRATEGY_CALLBACKS[config.STRATEGY]](newEvent).then(async function (response) {\n                    return response;\n                });\n            });\n        }\n        return callbacks[config.STRATEGY_CALLBACKS[config.STRATEGY]](event);\n    }());\n};\n\nself.addEventListener(\"install\", installEvent);\n\nself.addEventListener(\"fetch\", fetchEvent);\n\nself.addEventListener(\"activate\", activateEvent);\n\nself.onmessage = async function (message) {\n    let data = message.data;\n\n    if (data.type === 2) {\n        // eslint-disable-next-line no-new-func\n        let functions = new Function(data.method);\n\n        callbacks[data.name] = functions;\n        if (data.callback === \"STRATEGY\") {\n            config.STRATEGY_CALLBACKS[Object.keys(config.STRATEGY_CALLBACKS).length] = data.name;\n        } else if (data.callback === \"FETCH\") {\n            config.FETCH_CALLBACKS[data.fetchMethod] = data.name;\n        } else if (data.callback === \"UPDATE\") {\n            config.UPDATE_CALLBACKS[Object.keys(config.UPDATE_CALLBACKS).length] = data.name;\n        }\n    } else if (data.type === 3) {\n        config[data.field] = data.value;\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","function md5cycle(x, k) {\r\n    var a = x[0], b = x[1], c = x[2], d = x[3];\r\n\r\n    a = ff(a, b, c, d, k[0], 7, -680876936);\r\n    d = ff(d, a, b, c, k[1], 12, -389564586);\r\n    c = ff(c, d, a, b, k[2], 17,  606105819);\r\n    b = ff(b, c, d, a, k[3], 22, -1044525330);\r\n    a = ff(a, b, c, d, k[4], 7, -176418897);\r\n    d = ff(d, a, b, c, k[5], 12,  1200080426);\r\n    c = ff(c, d, a, b, k[6], 17, -1473231341);\r\n    b = ff(b, c, d, a, k[7], 22, -45705983);\r\n    a = ff(a, b, c, d, k[8], 7,  1770035416);\r\n    d = ff(d, a, b, c, k[9], 12, -1958414417);\r\n    c = ff(c, d, a, b, k[10], 17, -42063);\r\n    b = ff(b, c, d, a, k[11], 22, -1990404162);\r\n    a = ff(a, b, c, d, k[12], 7,  1804603682);\r\n    d = ff(d, a, b, c, k[13], 12, -40341101);\r\n    c = ff(c, d, a, b, k[14], 17, -1502002290);\r\n    b = ff(b, c, d, a, k[15], 22,  1236535329);\r\n\r\n    a = gg(a, b, c, d, k[1], 5, -165796510);\r\n    d = gg(d, a, b, c, k[6], 9, -1069501632);\r\n    c = gg(c, d, a, b, k[11], 14,  643717713);\r\n    b = gg(b, c, d, a, k[0], 20, -373897302);\r\n    a = gg(a, b, c, d, k[5], 5, -701558691);\r\n    d = gg(d, a, b, c, k[10], 9,  38016083);\r\n    c = gg(c, d, a, b, k[15], 14, -660478335);\r\n    b = gg(b, c, d, a, k[4], 20, -405537848);\r\n    a = gg(a, b, c, d, k[9], 5,  568446438);\r\n    d = gg(d, a, b, c, k[14], 9, -1019803690);\r\n    c = gg(c, d, a, b, k[3], 14, -187363961);\r\n    b = gg(b, c, d, a, k[8], 20,  1163531501);\r\n    a = gg(a, b, c, d, k[13], 5, -1444681467);\r\n    d = gg(d, a, b, c, k[2], 9, -51403784);\r\n    c = gg(c, d, a, b, k[7], 14,  1735328473);\r\n    b = gg(b, c, d, a, k[12], 20, -1926607734);\r\n\r\n    a = hh(a, b, c, d, k[5], 4, -378558);\r\n    d = hh(d, a, b, c, k[8], 11, -2022574463);\r\n    c = hh(c, d, a, b, k[11], 16,  1839030562);\r\n    b = hh(b, c, d, a, k[14], 23, -35309556);\r\n    a = hh(a, b, c, d, k[1], 4, -1530992060);\r\n    d = hh(d, a, b, c, k[4], 11,  1272893353);\r\n    c = hh(c, d, a, b, k[7], 16, -155497632);\r\n    b = hh(b, c, d, a, k[10], 23, -1094730640);\r\n    a = hh(a, b, c, d, k[13], 4,  681279174);\r\n    d = hh(d, a, b, c, k[0], 11, -358537222);\r\n    c = hh(c, d, a, b, k[3], 16, -722521979);\r\n    b = hh(b, c, d, a, k[6], 23,  76029189);\r\n    a = hh(a, b, c, d, k[9], 4, -640364487);\r\n    d = hh(d, a, b, c, k[12], 11, -421815835);\r\n    c = hh(c, d, a, b, k[15], 16,  530742520);\r\n    b = hh(b, c, d, a, k[2], 23, -995338651);\r\n\r\n    a = ii(a, b, c, d, k[0], 6, -198630844);\r\n    d = ii(d, a, b, c, k[7], 10,  1126891415);\r\n    c = ii(c, d, a, b, k[14], 15, -1416354905);\r\n    b = ii(b, c, d, a, k[5], 21, -57434055);\r\n    a = ii(a, b, c, d, k[12], 6,  1700485571);\r\n    d = ii(d, a, b, c, k[3], 10, -1894986606);\r\n    c = ii(c, d, a, b, k[10], 15, -1051523);\r\n    b = ii(b, c, d, a, k[1], 21, -2054922799);\r\n    a = ii(a, b, c, d, k[8], 6,  1873313359);\r\n    d = ii(d, a, b, c, k[15], 10, -30611744);\r\n    c = ii(c, d, a, b, k[6], 15, -1560198380);\r\n    b = ii(b, c, d, a, k[13], 21,  1309151649);\r\n    a = ii(a, b, c, d, k[4], 6, -145523070);\r\n    d = ii(d, a, b, c, k[11], 10, -1120210379);\r\n    c = ii(c, d, a, b, k[2], 15,  718787259);\r\n    b = ii(b, c, d, a, k[9], 21, -343485551);\r\n\r\n    x[0] = add32(a, x[0]);\r\n    x[1] = add32(b, x[1]);\r\n    x[2] = add32(c, x[2]);\r\n    x[3] = add32(d, x[3]);\r\n\r\n}\r\n\r\nfunction cmn(q, a, b, x, s, t) {\r\n    a = add32(add32(a, q), add32(x, t));\r\n    return add32((a << s) | (a >>> (32 - s)), b);\r\n}\r\n\r\nfunction ff(a, b, c, d, x, s, t) {\r\n    return cmn((b & c) | ((~b) & d), a, b, x, s, t);\r\n}\r\n\r\nfunction gg(a, b, c, d, x, s, t) {\r\n    return cmn((b & d) | (c & (~d)), a, b, x, s, t);\r\n}\r\n\r\nfunction hh(a, b, c, d, x, s, t) {\r\n    return cmn(b ^ c ^ d, a, b, x, s, t);\r\n}\r\n\r\nfunction ii(a, b, c, d, x, s, t) {\r\n    return cmn(c ^ (b | (~d)), a, b, x, s, t);\r\n}\r\n\r\nfunction md51(s) {\r\n    txt = '';\r\n    var n = s.length,\r\n    state = [1732584193, -271733879, -1732584194, 271733878], i;\r\n    for (i=64; i<=s.length; i+=64) {\r\n        md5cycle(state, md5blk(s.substring(i-64, i)));\r\n    }\r\n    s = s.substring(i-64);\r\n    var tail = [0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0];\r\n    for (i=0; i<s.length; i++)\r\n        tail[i>>2] |= s.charCodeAt(i) << ((i%4) << 3);\r\n    tail[i>>2] |= 0x80 << ((i%4) << 3);\r\n    if (i > 55) {\r\n        md5cycle(state, tail);\r\n        for (i=0; i<16; i++) tail[i] = 0;\r\n    }\r\n    tail[14] = n*8;\r\n    md5cycle(state, tail);\r\n    return state;\r\n}\r\n\r\n/* there needs to be support for Unicode here,\r\n * unless we pretend that we can redefine the MD-5\r\n * algorithm for multi-byte characters (perhaps\r\n * by adding every four 16-bit characters and\r\n * shortening the sum to 32 bits). Otherwise\r\n * I suggest performing MD-5 as if every character\r\n * was two bytes--e.g., 0040 0025 = @%--but then\r\n * how will an ordinary MD-5 sum be matched?\r\n * There is no way to standardize text to something\r\n * like UTF-8 before transformation; speed cost is\r\n * utterly prohibitive. The JavaScript standard\r\n * itself needs to look at this: it should start\r\n * providing access to strings as preformed UTF-8\r\n * 8-bit unsigned value arrays.\r\n */\r\nfunction md5blk(s) { /* I figured global was faster.   */\r\n    var md5blks = [], i; /* Andy King said do it this way. */\r\n    for (i=0; i<64; i+=4) {\r\n        md5blks[i>>2] = s.charCodeAt(i)\r\n        + (s.charCodeAt(i+1) << 8)\r\n        + (s.charCodeAt(i+2) << 16)\r\n        + (s.charCodeAt(i+3) << 24);\r\n    }\r\n    return md5blks;\r\n}\r\n\r\nvar hex_chr = '0123456789abcdef'.split('');\r\n\r\nfunction rhex(n)\r\n{\r\n    var s='', j=0;\r\n    for(; j<4; j++)\r\n        s += hex_chr[(n >> (j * 8 + 4)) & 0x0F]\r\n        + hex_chr[(n >> (j * 8)) & 0x0F];\r\n    return s;\r\n}\r\n\r\nfunction hex(x) {\r\n    for (var i=0; i<x.length; i++)\r\n        x[i] = rhex(x[i]);\r\n    return x.join('');\r\n}\r\n\r\nfunction md5(s) {\r\n    return hex(md51(s));\r\n}\r\n\r\n/* this function is much faster,\r\n so if possible we use it. Some IEs\r\n are the only ones I know of that\r\n need the idiotic second function,\r\n generated by an if clause.  */\r\n\r\nfunction add32(a, b) {\r\n    return (a + b) & 0xFFFFFFFF;\r\n}\r\n\r\nif (md5('hello') != '5d41402abc4b2a76b9719d911017c592') {\r\n    function add32(x, y) {\r\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF),\r\n        msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n        return (msw << 16) | (lsw & 0xFFFF);\r\n    }\r\n}\r\nmodule.exports = md5;\n\n\n// WEBPACK FOOTER //\n// ./src/md5.js","/* !\r\n localForage -- Offline Storage, Improved\r\n Version 1.5.3\r\n https://localforage.github.io/localForage\r\n (c) 2013-2017 Mozilla, Apache License 2.0\r\n */\r\n(function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {module.exports = f();} else if (typeof define === \"function\" && define.amd) {define([], f);} else {\n        var g;\n\n        if (typeof window !== \"undefined\") {g = window;} else if (typeof global !== \"undefined\") {g = global;} else if (typeof self !== \"undefined\") {g = self;} else {g = this;}g.localforage = f();\n    }\n})(function () {\n    var define, module, exports;\n\n    return (function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require === \"function\" && require;\n\n                    if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");\n\n                    throw (f.code = \"MODULE_NOT_FOUND\", f);\n                } var l = n[o] = {exports: {}};\n\n                t[o][0].call(l.exports, function (e) {\n                    var n = t[o][1][e];\n\n                    return s(n ? n : e);\n                }, l, l.exports, e, t, n, r);\n            } return n[o].exports;\n        } var i = typeof require === \"function\" && require;\n\n        for (var o = 0;o < r.length;o++)s(r[o]);return s;\n    })({1: [function (_dereq_, module, exports) {\r\n        (function (global) {\r\n            \"use strict\";\r\n            var Mutation = global.MutationObserver || global.WebKitMutationObserver;\r\n\r\n            var scheduleDrain;\r\n\r\n            {\r\n                if (Mutation) {\r\n                    var called = 0;\r\n                    var observer = new Mutation(nextTick);\r\n                    var element = global.document.createTextNode(\"\");\r\n\n                    observer.observe(element, {\r\n                        characterData: true\r\n                    });\r\n                    scheduleDrain = function () {\r\n                        element.data = (called = ++called % 2);\r\n                    };\r\n                } else if (!global.setImmediate && typeof global.MessageChannel !== \"undefined\") {\r\n                    var channel = new global.MessageChannel();\r\n\n                    channel.port1.onmessage = nextTick;\r\n                    scheduleDrain = function () {\r\n                        channel.port2.postMessage(0);\r\n                    };\r\n                } else if (\"document\" in global && \"onreadystatechange\" in global.document.createElement(\"script\")) {\r\n                    scheduleDrain = function () {\r\n\r\n                    // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\r\n                    // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\r\n                        var scriptEl = global.document.createElement(\"script\");\r\n\n                        scriptEl.onreadystatechange = function () {\r\n                        nextTick();\r\n\r\n                        scriptEl.onreadystatechange = null;\r\n                        scriptEl.parentNode.removeChild(scriptEl);\r\n                        scriptEl = null;\r\n                    };\r\n                        global.document.documentElement.appendChild(scriptEl);\r\n                    };\r\n                } else {\r\n                    scheduleDrain = function () {\r\n                        setTimeout(nextTick, 0);\r\n                    };\r\n                }\r\n            }\r\n\r\n            var draining;\r\n            var queue = [];\r\n// named nextTick for less confusing stack traces\r\n\n            function nextTick() {\r\n                draining = true;\r\n                var i, oldQueue;\r\n                var len = queue.length;\r\n\n                while (len) {\r\n                    oldQueue = queue;\r\n                    queue = [];\r\n                    i = -1;\r\n                    while (++i < len) {\r\n                        oldQueue[i]();\r\n                    }\r\n                    len = queue.length;\r\n                }\r\n                draining = false;\r\n            }\r\n\r\n            module.exports = immediate;\r\n            function immediate(task) {\r\n                if (queue.push(task) === 1 && !draining) {\r\n                    scheduleDrain();\r\n                }\r\n            }\r\n\r\n        }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\r\n    }, {}], 2: [function (_dereq_, module, exports) {\r\n        \"use strict\";\r\n        var immediate = _dereq_(1);\r\n\r\n    /* istanbul ignore next */\r\n        function INTERNAL() {}\r\n\r\n        var handlers = {};\r\n\r\n        var REJECTED = [\"REJECTED\"];\r\n        var FULFILLED = [\"FULFILLED\"];\r\n        var PENDING = [\"PENDING\"];\r\n\r\n        module.exports = exports = Promise;\r\n\r\n        function Promise(resolver) {\r\n            if (typeof resolver !== \"function\") {\r\n                throw new TypeError(\"resolver must be a function\");\r\n            }\r\n            this.state = PENDING;\r\n            this.queue = [];\r\n            this.outcome = void 0;\r\n            if (resolver !== INTERNAL) {\r\n                safelyResolveThenable(this, resolver);\r\n            }\r\n        }\r\n\r\n        Promise.prototype[\"catch\"] = function (onRejected) {\r\n            return this.then(null, onRejected);\r\n        };\r\n        Promise.prototype.then = function (onFulfilled, onRejected) {\r\n            if (typeof onFulfilled !== \"function\" && this.state === FULFILLED ||\r\n        typeof onRejected !== \"function\" && this.state === REJECTED) {\r\n                return this;\r\n            }\r\n            var promise = new this.constructor(INTERNAL);\r\n\n            if (this.state !== PENDING) {\r\n                var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\r\n\n                unwrap(promise, resolver, this.outcome);\r\n            } else {\r\n                this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\r\n            }\r\n\r\n            return promise;\r\n        };\r\n        function QueueItem(promise, onFulfilled, onRejected) {\r\n            this.promise = promise;\r\n            if (typeof onFulfilled === \"function\") {\r\n                this.onFulfilled = onFulfilled;\r\n                this.callFulfilled = this.otherCallFulfilled;\r\n            }\r\n            if (typeof onRejected === \"function\") {\r\n                this.onRejected = onRejected;\r\n                this.callRejected = this.otherCallRejected;\r\n            }\r\n        }\r\n        QueueItem.prototype.callFulfilled = function (value) {\r\n            handlers.resolve(this.promise, value);\r\n        };\r\n        QueueItem.prototype.otherCallFulfilled = function (value) {\r\n            unwrap(this.promise, this.onFulfilled, value);\r\n        };\r\n        QueueItem.prototype.callRejected = function (value) {\r\n            handlers.reject(this.promise, value);\r\n        };\r\n        QueueItem.prototype.otherCallRejected = function (value) {\r\n            unwrap(this.promise, this.onRejected, value);\r\n        };\r\n\r\n        function unwrap(promise, func, value) {\r\n            immediate(function () {\r\n                var returnValue;\r\n\n                try {\r\n                    returnValue = func(value);\r\n                } catch (e) {\r\n                    return handlers.reject(promise, e);\r\n                }\r\n                if (returnValue === promise) {\r\n                    handlers.reject(promise, new TypeError(\"Cannot resolve promise with itself\"));\r\n                } else {\r\n                    handlers.resolve(promise, returnValue);\r\n                }\r\n            });\r\n        }\r\n\r\n        handlers.resolve = function (self, value) {\r\n            var result = tryCatch(getThen, value);\r\n\n            if (result.status === \"error\") {\r\n                return handlers.reject(self, result.value);\r\n            }\r\n            var thenable = result.value;\r\n\r\n            if (thenable) {\r\n                safelyResolveThenable(self, thenable);\r\n            } else {\r\n                self.state = FULFILLED;\r\n                self.outcome = value;\r\n                var i = -1;\r\n                var len = self.queue.length;\r\n\n                while (++i < len) {\r\n                    self.queue[i].callFulfilled(value);\r\n                }\r\n            }\r\n            return self;\r\n        };\r\n        handlers.reject = function (self, error) {\r\n            self.state = REJECTED;\r\n            self.outcome = error;\r\n            var i = -1;\r\n            var len = self.queue.length;\r\n\n            while (++i < len) {\r\n                self.queue[i].callRejected(error);\r\n            }\r\n            return self;\r\n        };\r\n\r\n        function getThen(obj) {\r\n        // Make sure we only access the accessor once as required by the spec\r\n            var then = obj && obj.then;\r\n\n            if (obj && typeof obj === \"object\" && typeof then === \"function\") {\r\n                return function appyThen() {\r\n                    then.apply(obj, arguments);\r\n                };\r\n            }\r\n        }\r\n\r\n        function safelyResolveThenable(self, thenable) {\r\n        // Either fulfill, reject or reject with error\r\n            var called = false;\r\n\n            function onError(value) {\r\n                if (called) {\r\n                    return;\r\n                }\r\n                called = true;\r\n                handlers.reject(self, value);\r\n            }\r\n\r\n            function onSuccess(value) {\r\n                if (called) {\r\n                    return;\r\n                }\r\n                called = true;\r\n                handlers.resolve(self, value);\r\n            }\r\n\r\n            function tryToUnwrap() {\r\n                thenable(onSuccess, onError);\r\n            }\r\n\r\n            var result = tryCatch(tryToUnwrap);\r\n\n            if (result.status === \"error\") {\r\n                onError(result.value);\r\n            }\r\n        }\r\n\r\n        function tryCatch(func, value) {\r\n            var out = {};\r\n\n            try {\r\n                out.value = func(value);\r\n                out.status = \"success\";\r\n            } catch (e) {\r\n                out.status = \"error\";\r\n                out.value = e;\r\n            }\r\n            return out;\r\n        }\r\n\r\n        exports.resolve = resolve;\r\n        function resolve(value) {\r\n            if (value instanceof this) {\r\n                return value;\r\n            }\r\n            return handlers.resolve(new this(INTERNAL), value);\r\n        }\r\n\r\n        exports.reject = reject;\r\n        function reject(reason) {\r\n            var promise = new this(INTERNAL);\r\n\n            return handlers.reject(promise, reason);\r\n        }\r\n\r\n        exports.all = all;\r\n        function all(iterable) {\r\n            var self = this;\r\n\n            if (Object.prototype.toString.call(iterable) !== \"[object Array]\") {\r\n                return this.reject(new TypeError(\"must be an array\"));\r\n            }\r\n\r\n            var len = iterable.length;\r\n            var called = false;\r\n\n            if (!len) {\r\n                return this.resolve([]);\r\n            }\r\n\r\n            var values = new Array(len);\r\n            var resolved = 0;\r\n            var i = -1;\r\n            var promise = new this(INTERNAL);\r\n\r\n            while (++i < len) {\r\n                allResolver(iterable[i], i);\r\n            }\r\n            return promise;\r\n            function allResolver(value, i) {\r\n                self.resolve(value).then(resolveFromAll, function (error) {\r\n                    if (!called) {\r\n                        called = true;\r\n                        handlers.reject(promise, error);\r\n                    }\r\n                });\r\n                function resolveFromAll(outValue) {\r\n                    values[i] = outValue;\r\n                    if (++resolved === len && !called) {\r\n                        called = true;\r\n                        handlers.resolve(promise, values);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.race = race;\r\n        function race(iterable) {\r\n            var self = this;\r\n\n            if (Object.prototype.toString.call(iterable) !== \"[object Array]\") {\r\n                return this.reject(new TypeError(\"must be an array\"));\r\n            }\r\n\r\n            var len = iterable.length;\r\n            var called = false;\r\n\n            if (!len) {\r\n                return this.resolve([]);\r\n            }\r\n\r\n            var i = -1;\r\n            var promise = new this(INTERNAL);\r\n\r\n            while (++i < len) {\r\n                resolver(iterable[i]);\r\n            }\r\n            return promise;\r\n            function resolver(value) {\r\n                self.resolve(value).then(function (response) {\r\n                    if (!called) {\r\n                        called = true;\r\n                        handlers.resolve(promise, response);\r\n                    }\r\n                }, function (error) {\r\n                    if (!called) {\r\n                        called = true;\r\n                        handlers.reject(promise, error);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n    }, {\"1\": 1}], 3: [function (_dereq_, module, exports) {\r\n        (function (global) {\r\n            \"use strict\";\r\n            if (typeof global.Promise !== \"function\") {\r\n                global.Promise = _dereq_(2);\r\n            }\r\n\r\n        }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\r\n    }, {\"2\": 2}], 4: [function (_dereq_, module, exports) {\r\n        \"use strict\";\r\n\r\n        var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\r\n\r\n        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\r\n\r\n        function getIDB() {\r\n        /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\r\n            try {\r\n                if (typeof indexedDB !== \"undefined\") {\r\n                    return indexedDB;\r\n                }\r\n                if (typeof webkitIndexedDB !== \"undefined\") {\r\n                    return webkitIndexedDB;\r\n                }\r\n                if (typeof mozIndexedDB !== \"undefined\") {\r\n                    return mozIndexedDB;\r\n                }\r\n                if (typeof OIndexedDB !== \"undefined\") {\r\n                    return OIndexedDB;\r\n                }\r\n                if (typeof msIndexedDB !== \"undefined\") {\r\n                    return msIndexedDB;\r\n                }\r\n            } catch (e) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        var idb = getIDB();\r\n\r\n        function isIndexedDBValid() {\r\n            try {\r\n            // Initialize IndexedDB; fall back to vendor-prefixed versions\r\n            // if needed.\r\n                if (!idb) {\r\n                    return false;\r\n                }\r\n            // We mimic PouchDB here;\r\n            //\r\n            // We test for openDatabase because IE Mobile identifies itself\r\n            // as Safari. Oh the lulz...\r\n                var isSafari = typeof openDatabase !== \"undefined\" && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\r\n\r\n                var hasFetch = typeof fetch === \"function\" && fetch.toString().indexOf(\"[native code\") !== -1;\r\n\r\n            // Safari <10.1 does not meet our requirements for IDB support (#5572)\r\n            // since Safari 10.1 shipped with fetch, we can use that to detect it\r\n                return (!isSafari || hasFetch) && typeof indexedDB !== \"undefined\" &&\r\n            // some outdated implementations of IDB that appear on Samsung\r\n            // and HTC Android devices <4.4 are missing IDBKeyRange\r\n            // See: https://github.com/mozilla/localForage/issues/128\r\n            // See: https://github.com/mozilla/localForage/issues/272\r\n            typeof IDBKeyRange !== \"undefined\";\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n// Abstracts constructing a Blob object, so it also works in older\r\n// browsers that don't support the native Blob constructor. (i.e.\r\n// old QtWebKit versions, at least).\r\n// Abstracts constructing a Blob object, so it also works in older\r\n// browsers that don't support the native Blob constructor. (i.e.\r\n// old QtWebKit versions, at least).\r\n        function createBlob(parts, properties) {\r\n        /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\r\n            parts = parts || [];\r\n            properties = properties || {};\r\n            try {\r\n                return new Blob(parts, properties);\r\n            } catch (e) {\r\n                if (e.name !== \"TypeError\") {\r\n                    throw e;\r\n                }\r\n                var Builder = typeof BlobBuilder !== \"undefined\" ? BlobBuilder : typeof MSBlobBuilder !== \"undefined\" ? MSBlobBuilder : typeof MozBlobBuilder !== \"undefined\" ? MozBlobBuilder : WebKitBlobBuilder;\r\n                var builder = new Builder();\r\n\n                for (var i = 0; i < parts.length; i += 1) {\r\n                    builder.append(parts[i]);\r\n                }\r\n                return builder.getBlob(properties.type);\r\n            }\r\n        }\r\n\r\n// This is CommonJS because lie is an external dependency, so Rollup\r\n// can just ignore it.\r\n        if (typeof Promise === \"undefined\") {\r\n        // In the \"nopromises\" build this will just throw if you don't have\r\n        // a global promise object, but it would throw anyway later.\r\n            _dereq_(3);\r\n        }\r\n        var Promise$1 = Promise;\r\n\r\n        function executeCallback(promise, callback) {\r\n            if (callback) {\r\n                promise.then(function (result) {\r\n                    callback(null, result);\r\n                }, function (error) {\r\n                    callback(error);\r\n                });\r\n            }\r\n        }\r\n\r\n        function executeTwoCallbacks(promise, callback, errorCallback) {\r\n            if (typeof callback === \"function\") {\r\n                promise.then(callback);\r\n            }\r\n\r\n            if (typeof errorCallback === \"function\") {\r\n                promise[\"catch\"](errorCallback);\r\n            }\r\n        }\r\n\r\n        function normalizeKey(key) {\r\n        // Cast the key to a string, as that's all we can set as a key.\r\n            if (typeof key !== \"string\") {\r\n                console.warn(key + \" used as a key, but it is not a string.\");\r\n                key = String(key);\r\n            }\r\n\r\n            return key;\r\n        }\r\n\r\n        function getCallback() {\r\n            if (arguments.length && typeof arguments[arguments.length - 1] === \"function\") {\r\n                return arguments[arguments.length - 1];\r\n            }\r\n        }\r\n\r\n// Some code originally from async_storage.js in\r\n// [Gaia](https://github.com/mozilla-b2g/gaia).\r\n\r\n        var DETECT_BLOB_SUPPORT_STORE = \"local-forage-detect-blob-support\";\r\n        var supportsBlobs;\r\n        var dbContexts;\r\n        var toString = Object.prototype.toString;\r\n\r\n// Transaction Modes\r\n        var READ_ONLY = \"readonly\";\r\n        var READ_WRITE = \"readwrite\";\r\n\r\n// Transform a binary string to an array buffer, because otherwise\r\n// weird stuff happens when you try to work with the binary string directly.\r\n// It is known.\r\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\r\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\r\n        function _binStringToArrayBuffer(bin) {\r\n            var length = bin.length;\r\n            var buf = new ArrayBuffer(length);\r\n            var arr = new Uint8Array(buf);\r\n\n            for (var i = 0; i < length; i++) {\r\n                arr[i] = bin.charCodeAt(i);\r\n            }\r\n            return buf;\r\n        }\r\n\r\n//\r\n// Blobs are not supported in all versions of IndexedDB, notably\r\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\r\n//\r\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\r\n// Detecting them is expensive and confusing to users, and Chrome 37-42\r\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\r\n//\r\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\r\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\r\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\r\n//\r\n// Code borrowed from PouchDB. See:\r\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\r\n//\r\n        function _checkBlobSupportWithoutCaching(idb) {\r\n            return new Promise$1(function (resolve) {\r\n                var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\r\n                var blob = createBlob([\"\"]);\r\n\n                txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, \"key\");\r\n\r\n                txn.onabort = function (e) {\r\n                // If the transaction aborts now its due to not being able to\r\n                // write to the database, likely due to the disk being full\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    resolve(false);\r\n                };\r\n\r\n                txn.oncomplete = function () {\r\n                    var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\r\n                    var matchedEdge = navigator.userAgent.match(/Edge\\//);\r\n                // MS Edge pretends to be Chrome 42:\r\n                // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\r\n\n                    resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\r\n                };\r\n            })[\"catch\"](function () {\r\n                return false; // error, so assume unsupported\r\n            });\r\n        }\r\n\r\n        function _checkBlobSupport(idb) {\r\n            if (typeof supportsBlobs === \"boolean\") {\r\n                return Promise$1.resolve(supportsBlobs);\r\n            }\r\n            return _checkBlobSupportWithoutCaching(idb).then(function (value) {\r\n                supportsBlobs = value;\r\n                return supportsBlobs;\r\n            });\r\n        }\r\n\r\n        function _deferReadiness(dbInfo) {\r\n            var dbContext = dbContexts[dbInfo.name];\r\n\r\n        // Create a deferred object representing the current database operation.\r\n            var deferredOperation = {};\r\n\r\n            deferredOperation.promise = new Promise$1(function (resolve, reject) {\r\n                deferredOperation.resolve = resolve;\r\n                deferredOperation.reject = reject;\r\n            });\r\n\r\n        // Enqueue the deferred operation.\r\n            dbContext.deferredOperations.push(deferredOperation);\r\n\r\n        // Chain its promise to the database readiness.\r\n            if (!dbContext.dbReady) {\r\n                dbContext.dbReady = deferredOperation.promise;\r\n            } else {\r\n                dbContext.dbReady = dbContext.dbReady.then(function () {\r\n                    return deferredOperation.promise;\r\n                });\r\n            }\r\n        }\r\n\r\n        function _advanceReadiness(dbInfo) {\r\n            var dbContext = dbContexts[dbInfo.name];\r\n\r\n        // Dequeue a deferred operation.\r\n            var deferredOperation = dbContext.deferredOperations.pop();\r\n\r\n        // Resolve its promise (which is part of the database readiness\r\n        // chain of promises).\r\n            if (deferredOperation) {\r\n                deferredOperation.resolve();\r\n                return deferredOperation.promise;\r\n            }\r\n        }\r\n\r\n        function _rejectReadiness(dbInfo, err) {\r\n            var dbContext = dbContexts[dbInfo.name];\r\n\r\n        // Dequeue a deferred operation.\r\n            var deferredOperation = dbContext.deferredOperations.pop();\r\n\r\n        // Reject its promise (which is part of the database readiness\r\n        // chain of promises).\r\n            if (deferredOperation) {\r\n                deferredOperation.reject(err);\r\n                return deferredOperation.promise;\r\n            }\r\n        }\r\n\r\n        function _getConnection(dbInfo, upgradeNeeded) {\r\n            return new Promise$1(function (resolve, reject) {\r\n\r\n                if (dbInfo.db) {\r\n                    if (upgradeNeeded) {\r\n                    _deferReadiness(dbInfo);\r\n                    dbInfo.db.close();\r\n                } else {\r\n                    return resolve(dbInfo.db);\r\n                }\r\n                }\r\n\r\n                var dbArgs = [dbInfo.name];\r\n\r\n                if (upgradeNeeded) {\r\n                    dbArgs.push(dbInfo.version);\r\n                }\r\n\r\n                var openreq = idb.open.apply(idb, dbArgs);\r\n\r\n                if (upgradeNeeded) {\r\n                    openreq.onupgradeneeded = function (e) {\r\n                    var db = openreq.result;\r\n\n                    try {\r\n                        db.createObjectStore(dbInfo.storeName);\r\n                        if (e.oldVersion <= 1) {\r\n                            // Added when support for blob shims was added\r\n                            db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\r\n                        }\r\n                    } catch (ex) {\r\n                        if (ex.name === \"ConstraintError\") {\r\n                            console.warn('The database \"' + dbInfo.name + '\"' + \" has been upgraded from version \" + e.oldVersion + \" to version \" + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\r\n                        } else {\r\n                            throw ex;\r\n                        }\r\n                    }\r\n                };\r\n                }\r\n\r\n                openreq.onerror = function (e) {\r\n                    e.preventDefault();\r\n                    reject(openreq.error);\r\n                };\r\n\r\n                openreq.onsuccess = function () {\r\n                    resolve(openreq.result);\r\n                    _advanceReadiness(dbInfo);\r\n                };\r\n            });\r\n        }\r\n\r\n        function _getOriginalConnection(dbInfo) {\r\n            return _getConnection(dbInfo, false);\r\n        }\r\n\r\n        function _getUpgradedConnection(dbInfo) {\r\n            return _getConnection(dbInfo, true);\r\n        }\r\n\r\n        function _isUpgradeNeeded(dbInfo, defaultVersion) {\r\n            if (!dbInfo.db) {\r\n                return true;\r\n            }\r\n\r\n            var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\r\n            var isDowngrade = dbInfo.version < dbInfo.db.version;\r\n            var isUpgrade = dbInfo.version > dbInfo.db.version;\r\n\r\n            if (isDowngrade) {\r\n            // If the version is not the default one\r\n            // then warn for impossible downgrade.\r\n                if (dbInfo.version !== defaultVersion) {\r\n                    console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + \" to version \" + dbInfo.version + \".\");\r\n                }\r\n            // Align the versions to prevent errors.\r\n                dbInfo.version = dbInfo.db.version;\r\n            }\r\n\r\n            if (isUpgrade || isNewStore) {\r\n            // If the store is new then increment the version (if needed).\r\n            // This will trigger an \"upgradeneeded\" event which is required\r\n            // for creating a store.\r\n                if (isNewStore) {\r\n                    var incVersion = dbInfo.db.version + 1;\r\n\n                    if (incVersion > dbInfo.version) {\r\n                    dbInfo.version = incVersion;\r\n                }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n// encode a blob for indexeddb engines that don't support blobs\r\n        function _encodeBlob(blob) {\r\n            return new Promise$1(function (resolve, reject) {\r\n                var reader = new FileReader();\r\n\n                reader.onerror = reject;\r\n                reader.onloadend = function (e) {\r\n                    var base64 = btoa(e.target.result || \"\");\r\n\n                    resolve({\r\n                    __local_forage_encoded_blob: true,\r\n                    data: base64,\r\n                    type: blob.type\r\n                });\r\n                };\r\n                reader.readAsBinaryString(blob);\r\n            });\r\n        }\r\n\r\n// decode an encoded blob\r\n        function _decodeBlob(encodedBlob) {\r\n            var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\r\n\n            return createBlob([arrayBuff], { type: encodedBlob.type });\r\n        }\r\n\r\n// is this one of our fancy encoded blobs?\r\n        function _isEncodedBlob(value) {\r\n            return value && value.__local_forage_encoded_blob;\r\n        }\r\n\r\n// Specialize the default `ready()` function by making it dependent\r\n// on the current database operations. Thus, the driver will be actually\r\n// ready when it's been initialized (default) *and* there are no pending\r\n// operations on the database (initiated by some other instances).\r\n        function _fullyReady(callback) {\r\n            var self = this;\r\n\r\n            var promise = self._initReady().then(function () {\r\n                var dbContext = dbContexts[self._dbInfo.name];\r\n\r\n                if (dbContext && dbContext.dbReady) {\r\n                    return dbContext.dbReady;\r\n                }\r\n            });\r\n\r\n            executeTwoCallbacks(promise, callback, callback);\r\n            return promise;\r\n        }\r\n\r\n// Try to establish a new db connection to replace the\r\n// current one which is broken (i.e. experiencing\r\n// InvalidStateError while creating a transaction).\r\n        function _tryReconnect(dbInfo) {\r\n            _deferReadiness(dbInfo);\r\n\r\n            var dbContext = dbContexts[dbInfo.name];\r\n            var forages = dbContext.forages;\r\n\r\n            for (var i = 0; i < forages.length; i++) {\r\n                var forage = forages[i];\r\n\n                if (forage._dbInfo.db) {\r\n                    forage._dbInfo.db.close();\r\n                    forage._dbInfo.db = null;\r\n                }\r\n            }\r\n\r\n            return _getOriginalConnection(dbInfo).then(function (db) {\r\n                for (var j = 0; j < forages.length; j++) {\r\n                    forages[j]._dbInfo.db = db;\r\n                }\r\n                dbInfo.db = db;\r\n            }).then(function () {\r\n                if (_isUpgradeNeeded(dbInfo)) {\r\n                // Reopen the database for upgrading.\r\n                return _getUpgradedConnection(dbInfo);\r\n            }\r\n            })[\"catch\"](function (err) {\r\n            _rejectReadiness(dbInfo, err);\r\n            throw err;\r\n        });\r\n        }\r\n\r\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\r\n// so we have to do it with callbacks\r\n        function createTransaction(dbInfo, mode, callback, retries) {\r\n            if (retries === undefined) {\r\n                retries = 1;\r\n            }\r\n\r\n            try {\r\n                var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\r\n\n                callback(null, tx);\r\n            } catch (err) {\r\n                if (retries > 0 && (!dbInfo.db || err.name === \"InvalidStateError\" || err.name === \"NotFoundError\")) {\r\n\r\n                    return Promise$1.resolve().then(function () {\r\n                    if (!dbInfo.db || err.name === \"NotFoundError\" && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\r\n                        // increase the db version, to create the new ObjectStore\r\n                        if (dbInfo.db) {\r\n                            dbInfo.version = dbInfo.db.version + 1;\r\n                        }\r\n                        // Reopen the database for upgrading.\r\n                        return _getUpgradedConnection(dbInfo);\r\n                    }\r\n                }).then(function () {\r\n                    return _tryReconnect(dbInfo).then(function () {\r\n                        createTransaction(dbInfo, mode, callback, retries - 1);\r\n                    });\r\n                })[\"catch\"](callback);\r\n                }\r\n\r\n                callback(err);\r\n            }\r\n        }\r\n\r\n// Open the IndexedDB database (automatically creates one if one didn't\r\n// previously exist), using any options set in the config.\r\n        function _initStorage(options) {\r\n            var self = this;\r\n            var dbInfo = {\r\n                db: null\r\n            };\r\n\r\n            if (options) {\r\n                for (var i in options) {\r\n                    dbInfo[i] = options[i];\r\n                }\r\n            }\r\n\r\n        // Initialize a singleton container for all running localForages.\r\n            if (!dbContexts) {\r\n                dbContexts = {};\r\n            }\r\n\r\n        // Get the current context of the database;\r\n            var dbContext = dbContexts[dbInfo.name];\r\n\r\n        // ...or create a new context.\r\n            if (!dbContext) {\r\n                dbContext = {\r\n                // Running localForages sharing a database.\r\n                    forages: [],\r\n                // Shared database.\r\n                    db: null,\r\n                // Database readiness (promise).\r\n                    dbReady: null,\r\n                // Deferred operations on the database.\r\n                    deferredOperations: []\r\n                };\r\n            // Register the new context in the global container.\r\n                dbContexts[dbInfo.name] = dbContext;\r\n            }\r\n\r\n        // Register itself as a running localForage in the current context.\r\n            dbContext.forages.push(self);\r\n\r\n        // Replace the default `ready()` function with the specialized one.\r\n            if (!self._initReady) {\r\n                self._initReady = self.ready;\r\n                self.ready = _fullyReady;\r\n            }\r\n\r\n        // Create an array of initialization states of the related localForages.\r\n            var initPromises = [];\r\n\r\n            function ignoreErrors() {\r\n            // Don't handle errors here,\r\n            // just makes sure related localForages aren't pending.\r\n                return Promise$1.resolve();\r\n            }\r\n\r\n            for (var j = 0; j < dbContext.forages.length; j++) {\r\n                var forage = dbContext.forages[j];\r\n\n                if (forage !== self) {\r\n                // Don't wait for itself...\r\n                    initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\r\n                }\r\n            }\r\n\r\n        // Take a snapshot of the related localForages.\r\n            var forages = dbContext.forages.slice(0);\r\n\r\n        // Initialize the connection process only when\r\n        // all the related localForages aren't pending.\r\n            return Promise$1.all(initPromises).then(function () {\r\n                dbInfo.db = dbContext.db;\r\n            // Get the connection or open a new one without upgrade.\r\n                return _getOriginalConnection(dbInfo);\r\n            }).then(function (db) {\r\n                dbInfo.db = db;\r\n                if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\r\n                // Reopen the database for upgrading.\r\n                return _getUpgradedConnection(dbInfo);\r\n            }\r\n                return db;\r\n            }).then(function (db) {\r\n            dbInfo.db = dbContext.db = db;\r\n            self._dbInfo = dbInfo;\r\n            // Share the final connection amongst related localForages.\r\n            for (var k = 0; k < forages.length; k++) {\r\n                var forage = forages[k];\r\n\n                if (forage !== self) {\r\n                    // Self is already up-to-date.\r\n                    forage._dbInfo.db = dbInfo.db;\r\n                    forage._dbInfo.version = dbInfo.version;\r\n                }\r\n            }\r\n        });\r\n        }\r\n\r\n        function getItem(key, callback) {\r\n            var self = this;\r\n\r\n            key = normalizeKey(key);\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                    if (err) {\r\n                        return reject(err);\r\n                    }\r\n\r\n                    try {\r\n                        var store = transaction.objectStore(self._dbInfo.storeName);\r\n                        var req = store.get(key);\r\n\r\n                        req.onsuccess = function () {\r\n                            var value = req.result;\r\n\n                            if (value === undefined) {\r\n                                value = null;\r\n                            }\r\n                            if (_isEncodedBlob(value)) {\r\n                                value = _decodeBlob(value);\r\n                            }\r\n                            resolve(value);\r\n                        };\r\n\r\n                        req.onerror = function () {\r\n                            reject(req.error);\r\n                        };\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Iterate over all items stored in database.\r\n        function iterate(iterator, callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                    if (err) {\r\n                        return reject(err);\r\n                    }\r\n\r\n                    try {\r\n                        var store = transaction.objectStore(self._dbInfo.storeName);\r\n                        var req = store.openCursor();\r\n                        var iterationNumber = 1;\r\n\r\n                        req.onsuccess = function () {\r\n                            var cursor = req.result;\r\n\r\n                            if (cursor) {\r\n                                var value = cursor.value;\r\n\n                                if (_isEncodedBlob(value)) {\r\n                                    value = _decodeBlob(value);\r\n                                }\r\n                                var result = iterator(value, cursor.key, iterationNumber++);\r\n\r\n                                // when the iterator callback retuns any\r\n                                // (non-`undefined`) value, then we stop\r\n                                // the iteration immediately\r\n                                if (result !== void 0) {\r\n                                    resolve(result);\r\n                                } else {\r\n                                    cursor[\"continue\"]();\r\n                                }\r\n                            } else {\r\n                                resolve();\r\n                            }\r\n                        };\r\n\r\n                        req.onerror = function () {\r\n                            reject(req.error);\r\n                        };\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n\r\n            return promise;\r\n        }\r\n\r\n        function setItem(key, value, callback) {\r\n            var self = this;\r\n\r\n            key = normalizeKey(key);\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                var dbInfo;\r\n\n                self.ready().then(function () {\r\n                    dbInfo = self._dbInfo;\r\n                    if (toString.call(value) === \"[object Blob]\") {\r\n                    return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\r\n                        if (blobSupport) {\r\n                            return value;\r\n                        }\r\n                        return _encodeBlob(value);\r\n                    });\r\n                }\r\n                    return value;\r\n                }).then(function (value) {\r\n                createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\r\n                    if (err) {\r\n                        return reject(err);\r\n                    }\r\n\r\n                    try {\r\n                        var store = transaction.objectStore(self._dbInfo.storeName);\r\n                        var req = store.put(value, key);\r\n\r\n                        // The reason we don't _save_ null is because IE 10 does\r\n                        // not support saving the `null` type in IndexedDB. How\r\n                        // ironic, given the bug below!\r\n                        // See: https://github.com/mozilla/localForage/issues/161\r\n                        if (value === null) {\r\n                            value = undefined;\r\n                        }\r\n\r\n                        transaction.oncomplete = function () {\r\n                            // Cast to undefined so the value passed to\r\n                            // callback/promise is the same as what one would get out\r\n                            // of `getItem()` later. This leads to some weirdness\r\n                            // (setItem('foo', undefined) will return `null`), but\r\n                            // it's not my fault localStorage is our baseline and that\r\n                            // it's weird.\r\n                            if (value === undefined) {\r\n                                value = null;\r\n                            }\r\n\r\n                            resolve(value);\r\n                        };\r\n                        transaction.onabort = transaction.onerror = function () {\r\n                            var err = req.error ? req.error : req.transaction.error;\r\n\n                            reject(err);\r\n                        };\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n            })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function removeItem(key, callback) {\r\n            var self = this;\r\n\r\n            key = normalizeKey(key);\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\r\n                    if (err) {\r\n                        return reject(err);\r\n                    }\r\n\r\n                    try {\r\n                        var store = transaction.objectStore(self._dbInfo.storeName);\r\n                        // We use a Grunt task to make this safe for IE and some\r\n                        // versions of Android (including those used by Cordova).\r\n                        // Normally IE won't like `.delete()` and will insist on\r\n                        // using `['delete']()`, but we have a build step that\r\n                        // fixes this for us now.\r\n                        var req = store[\"delete\"](key);\r\n\n                        transaction.oncomplete = function () {\r\n                            resolve();\r\n                        };\r\n\r\n                        transaction.onerror = function () {\r\n                            reject(req.error);\r\n                        };\r\n\r\n                        // The request will be also be aborted if we've exceeded our storage\r\n                        // space.\r\n                        transaction.onabort = function () {\r\n                            var err = req.error ? req.error : req.transaction.error;\r\n\n                            reject(err);\r\n                        };\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function clear(callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\r\n                    if (err) {\r\n                        return reject(err);\r\n                    }\r\n\r\n                    try {\r\n                        var store = transaction.objectStore(self._dbInfo.storeName);\r\n                        var req = store.clear();\r\n\r\n                        transaction.oncomplete = function () {\r\n                            resolve();\r\n                        };\r\n\r\n                        transaction.onabort = transaction.onerror = function () {\r\n                            var err = req.error ? req.error : req.transaction.error;\r\n\n                            reject(err);\r\n                        };\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function length(callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                    if (err) {\r\n                        return reject(err);\r\n                    }\r\n\r\n                    try {\r\n                        var store = transaction.objectStore(self._dbInfo.storeName);\r\n                        var req = store.count();\r\n\r\n                        req.onsuccess = function () {\r\n                            resolve(req.result);\r\n                        };\r\n\r\n                        req.onerror = function () {\r\n                            reject(req.error);\r\n                        };\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function key(n, callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                if (n < 0) {\r\n                    resolve(null);\r\n\r\n                    return;\r\n                }\r\n\r\n                self.ready().then(function () {\r\n                    createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                    if (err) {\r\n                        return reject(err);\r\n                    }\r\n\r\n                    try {\r\n                        var store = transaction.objectStore(self._dbInfo.storeName);\r\n                        var advanced = false;\r\n                        var req = store.openCursor();\r\n\r\n                        req.onsuccess = function () {\r\n                            var cursor = req.result;\r\n\n                            if (!cursor) {\r\n                                // this means there weren't enough keys\r\n                                resolve(null);\r\n\r\n                                return;\r\n                            }\r\n\r\n                            if (n === 0) {\r\n                                // We have the first key, return it if that's what they\r\n                                // wanted.\r\n                                resolve(cursor.key);\r\n                            } else {\r\n                                if (!advanced) {\r\n                                    // Otherwise, ask the cursor to skip ahead n\r\n                                    // records.\r\n                                    advanced = true;\r\n                                    cursor.advance(n);\r\n                                } else {\r\n                                    // When we get here, we've got the nth key.\r\n                                    resolve(cursor.key);\r\n                                }\r\n                            }\r\n                        };\r\n\r\n                        req.onerror = function () {\r\n                            reject(req.error);\r\n                        };\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function keys(callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\r\n                    if (err) {\r\n                        return reject(err);\r\n                    }\r\n\r\n                    try {\r\n                        var store = transaction.objectStore(self._dbInfo.storeName);\r\n                        var req = store.openCursor();\r\n                        var keys = [];\r\n\r\n                        req.onsuccess = function () {\r\n                            var cursor = req.result;\r\n\r\n                            if (!cursor) {\r\n                                resolve(keys);\r\n                                return;\r\n                            }\r\n\r\n                            keys.push(cursor.key);\r\n                            cursor[\"continue\"]();\r\n                        };\r\n\r\n                        req.onerror = function () {\r\n                            reject(req.error);\r\n                        };\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    }\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function dropInstance(options, callback) {\r\n            callback = getCallback.apply(this, arguments);\r\n\r\n            var currentConfig = this.config();\r\n\n            options = typeof options !== \"function\" && options || {};\r\n            if (!options.name) {\r\n                options.name = options.name || currentConfig.name;\r\n                options.storeName = options.storeName || currentConfig.storeName;\r\n            }\r\n\r\n            var self = this;\r\n            var promise;\r\n\n            if (!options.name) {\r\n                promise = Promise$1.reject(\"Invalid arguments\");\r\n            } else {\r\n                var dbPromise = options.name === currentConfig.name && self._dbInfo.db ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options);\r\n\r\n                if (!options.storeName) {\r\n                    promise = dbPromise.then(function () {\r\n\r\n                    _deferReadiness(options);\r\n\r\n                    var dbContext = dbContexts[options.name];\r\n                    var forages = dbContext.forages;\r\n\r\n                    for (var i = 0; i < forages.length; i++) {\r\n                        var forage = forages[i];\r\n\n                        if (forage._dbInfo.db) {\r\n                            forage._dbInfo.db.close();\r\n                            forage._dbInfo.db = null;\r\n                        }\r\n                    }\r\n\r\n                    var dropDBPromise = new Promise$1(function (resolve, reject) {\r\n                        var req = idb.deleteDatabase(options.name);\r\n\r\n                        req.onerror = req.onblocked = reject;\r\n\r\n                        req.onsuccess = resolve;\r\n                    });\r\n\r\n                    return dropDBPromise.then(function () {\r\n                        for (var j = 0; j < forages.length; j++) {\r\n                            _advanceReadiness(forage._dbInfo);\r\n                        }\r\n                    })[\"catch\"](function (err) {\r\n                        (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\r\n                        throw err;\r\n                    });\r\n                });\r\n                } else {\r\n                    promise = dbPromise.then(function (db) {\r\n                    if (!db.objectStoreNames.contains(options.storeName)) {\r\n                        return;\r\n                    }\r\n\r\n                    var newVersion = db.version + 1;\r\n\r\n                    _deferReadiness(options);\r\n\r\n                    var dbContext = dbContexts[options.name];\r\n                    var forages = dbContext.forages;\r\n\r\n                    for (var i = 0; i < forages.length; i++) {\r\n                        var forage = forages[i];\r\n\n                        if (forage._dbInfo.db) {\r\n                            forage._dbInfo.db.close();\r\n                            forage._dbInfo.db = null;\r\n                            forage._dbInfo.version = newVersion;\r\n                        }\r\n                    }\r\n\r\n                    var dropObjectPromise = new Promise$1(function (resolve, reject) {\r\n                        var req = idb.open(options.name, newVersion);\r\n\r\n                        req.onerror = reject;\r\n\r\n                        req.onupgradeneeded = function () {\r\n                            var db = req.result;\r\n\n                            db.deleteObjectStore(options.storeName);\r\n                        };\r\n\r\n                        req.onsuccess = function () {\r\n                            var db = req.result;\r\n\n                            resolve(db);\r\n                        };\r\n                    });\r\n\r\n                    return dropObjectPromise.then(function (db) {\r\n                        for (var j = 0; j < forages.length; j++) {\r\n                            var forage = forages[j];\r\n\n                            forage._dbInfo.db = db;\r\n                            _advanceReadiness(forage._dbInfo);\r\n                        }\r\n                    })[\"catch\"](function (err) {\r\n                        (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\r\n                        throw err;\r\n                    });\r\n                });\r\n                }\r\n            }\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        var asyncStorage = {\r\n            _driver: \"asyncStorage\",\r\n            _initStorage: _initStorage,\r\n            _support: isIndexedDBValid(),\r\n            iterate: iterate,\r\n            getItem: getItem,\r\n            setItem: setItem,\r\n            removeItem: removeItem,\r\n            clear: clear,\r\n            length: length,\r\n            key: key,\r\n            keys: keys,\r\n            dropInstance: dropInstance\r\n        };\r\n\r\n        function isWebSQLValid() {\r\n            return typeof openDatabase === \"function\";\r\n        }\r\n\r\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\r\n// it to Base64, so this is how we store it to prevent very strange errors with less\r\n// verbose ways of binary <-> string data storage.\r\n        var BASE_CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\r\n        var BLOB_TYPE_PREFIX = \"~~local_forage_type~\";\r\n        var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\r\n\r\n        var SERIALIZED_MARKER = \"__lfsc__:\";\r\n        var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\r\n\r\n// OMG the serializations!\r\n        var TYPE_ARRAYBUFFER = \"arbf\";\r\n        var TYPE_BLOB = \"blob\";\r\n        var TYPE_INT8ARRAY = \"si08\";\r\n        var TYPE_UINT8ARRAY = \"ui08\";\r\n        var TYPE_UINT8CLAMPEDARRAY = \"uic8\";\r\n        var TYPE_INT16ARRAY = \"si16\";\r\n        var TYPE_INT32ARRAY = \"si32\";\r\n        var TYPE_UINT16ARRAY = \"ur16\";\r\n        var TYPE_UINT32ARRAY = \"ui32\";\r\n        var TYPE_FLOAT32ARRAY = \"fl32\";\r\n        var TYPE_FLOAT64ARRAY = \"fl64\";\r\n        var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\r\n\r\n        var toString$1 = Object.prototype.toString;\r\n\r\n        function stringToBuffer(serializedString) {\r\n        // Fill the string into a ArrayBuffer.\r\n            var bufferLength = serializedString.length * 0.75;\r\n            var len = serializedString.length;\r\n            var i;\r\n            var p = 0;\r\n            var encoded1, encoded2, encoded3, encoded4;\r\n\r\n            if (serializedString[serializedString.length - 1] === \"=\") {\r\n                bufferLength--;\r\n                if (serializedString[serializedString.length - 2] === \"=\") {\r\n                    bufferLength--;\r\n                }\r\n            }\r\n\r\n            var buffer = new ArrayBuffer(bufferLength);\r\n            var bytes = new Uint8Array(buffer);\r\n\r\n            for (i = 0; i < len; i += 4) {\r\n                encoded1 = BASE_CHARS.indexOf(serializedString[i]);\r\n                encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\r\n                encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\r\n                encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\r\n\r\n            /* jslint bitwise: true */\r\n                bytes[p++] = encoded1 << 2 | encoded2 >> 4;\r\n                bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\r\n                bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\r\n            }\r\n            return buffer;\r\n        }\r\n\r\n// Converts a buffer to a string to store, serialized, in the backend\r\n// storage library.\r\n        function bufferToString(buffer) {\r\n        // base64-arraybuffer\r\n            var bytes = new Uint8Array(buffer);\r\n            var base64String = \"\";\r\n            var i;\r\n\r\n            for (i = 0; i < bytes.length; i += 3) {\r\n            /* jslint bitwise: true */\r\n                base64String += BASE_CHARS[bytes[i] >> 2];\r\n                base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\r\n                base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\r\n                base64String += BASE_CHARS[bytes[i + 2] & 63];\r\n            }\r\n\r\n            if (bytes.length % 3 === 2) {\r\n                base64String = base64String.substring(0, base64String.length - 1) + \"=\";\r\n            } else if (bytes.length % 3 === 1) {\r\n                base64String = base64String.substring(0, base64String.length - 2) + \"==\";\r\n            }\r\n\r\n            return base64String;\r\n        }\r\n\r\n// Serialize a value, afterwards executing a callback (which usually\r\n// instructs the `setItem()` callback/promise to be executed). This is how\r\n// we store binary data with localStorage.\r\n        function serialize(value, callback) {\r\n            var valueType = \"\";\r\n\n            if (value) {\r\n                valueType = toString$1.call(value);\r\n            }\r\n\r\n        // Cannot use `value instanceof ArrayBuffer` or such here, as these\r\n        // checks fail when running the tests using casper.js...\r\n        //\r\n        // TODO: See why those tests fail and use a better solution.\r\n            if (value && (valueType === \"[object ArrayBuffer]\" || value.buffer && toString$1.call(value.buffer) === \"[object ArrayBuffer]\")) {\r\n            // Convert binary arrays to a string and prefix the string with\r\n            // a special marker.\r\n                var buffer;\r\n                var marker = SERIALIZED_MARKER;\r\n\r\n                if (value instanceof ArrayBuffer) {\r\n                    buffer = value;\r\n                    marker += TYPE_ARRAYBUFFER;\r\n                } else {\r\n                    buffer = value.buffer;\r\n\r\n                    if (valueType === \"[object Int8Array]\") {\r\n                    marker += TYPE_INT8ARRAY;\r\n                } else if (valueType === \"[object Uint8Array]\") {\r\n                    marker += TYPE_UINT8ARRAY;\r\n                } else if (valueType === \"[object Uint8ClampedArray]\") {\r\n                    marker += TYPE_UINT8CLAMPEDARRAY;\r\n                } else if (valueType === \"[object Int16Array]\") {\r\n                    marker += TYPE_INT16ARRAY;\r\n                } else if (valueType === \"[object Uint16Array]\") {\r\n                    marker += TYPE_UINT16ARRAY;\r\n                } else if (valueType === \"[object Int32Array]\") {\r\n                    marker += TYPE_INT32ARRAY;\r\n                } else if (valueType === \"[object Uint32Array]\") {\r\n                    marker += TYPE_UINT32ARRAY;\r\n                } else if (valueType === \"[object Float32Array]\") {\r\n                    marker += TYPE_FLOAT32ARRAY;\r\n                } else if (valueType === \"[object Float64Array]\") {\r\n                    marker += TYPE_FLOAT64ARRAY;\r\n                } else {\r\n                    callback(new Error(\"Failed to get type for BinaryArray\"));\r\n                }\r\n                }\r\n\r\n                callback(marker + bufferToString(buffer));\r\n            } else if (valueType === \"[object Blob]\") {\r\n            // Conver the blob to a binaryArray and then to a string.\r\n                var fileReader = new FileReader();\r\n\r\n                fileReader.onload = function () {\r\n                // Backwards-compatible prefix for the blob type.\r\n                var str = BLOB_TYPE_PREFIX + value.type + \"~\" + bufferToString(this.result);\r\n\r\n                callback(SERIALIZED_MARKER + TYPE_BLOB + str);\r\n            };\r\n\r\n                fileReader.readAsArrayBuffer(value);\r\n            } else {\r\n                try {\r\n                callback(JSON.stringify(value));\r\n            } catch (e) {\r\n                console.error(\"Couldn't convert value into a JSON string: \", value);\r\n\r\n                callback(null, e);\r\n            }\r\n            }\r\n        }\r\n\r\n// Deserialize data we've inserted into a value column/field. We place\r\n// special markers into our strings to mark them as encoded; this isn't\r\n// as nice as a meta field, but it's the only sane thing we can do whilst\r\n// keeping localStorage support intact.\r\n//\r\n// Oftentimes this will just deserialize JSON content, but if we have a\r\n// special marker (SERIALIZED_MARKER, defined above), we will extract\r\n// some kind of arraybuffer/binary data/typed array out of the string.\r\n        function deserialize(value) {\r\n        // If we haven't marked this string as being specially serialized (i.e.\r\n        // something other than serialized JSON), we can just return it and be\r\n        // done with it.\r\n            if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\r\n                return JSON.parse(value);\r\n            }\r\n\r\n        // The following code deals with deserializing some kind of Blob or\r\n        // TypedArray. First we separate out the type of data we're dealing\r\n        // with from the data itself.\r\n            var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\r\n            var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\r\n\r\n            var blobType;\r\n        // Backwards-compatible blob type serialization strategy.\r\n        // DBs created with older versions of localForage will simply not have the blob type.\r\n\n            if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\r\n                var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\r\n\n                blobType = matcher[1];\r\n                serializedString = serializedString.substring(matcher[0].length);\r\n            }\r\n            var buffer = stringToBuffer(serializedString);\r\n\r\n        // Return the right type based on the code/type set during\r\n        // serialization.\r\n            switch (type) {\r\n            case TYPE_ARRAYBUFFER:\r\n                return buffer;\r\n            case TYPE_BLOB:\r\n                return createBlob([buffer], { type: blobType });\r\n            case TYPE_INT8ARRAY:\r\n                return new Int8Array(buffer);\r\n            case TYPE_UINT8ARRAY:\r\n                return new Uint8Array(buffer);\r\n            case TYPE_UINT8CLAMPEDARRAY:\r\n                return new Uint8ClampedArray(buffer);\r\n            case TYPE_INT16ARRAY:\r\n                return new Int16Array(buffer);\r\n            case TYPE_UINT16ARRAY:\r\n                return new Uint16Array(buffer);\r\n            case TYPE_INT32ARRAY:\r\n                return new Int32Array(buffer);\r\n            case TYPE_UINT32ARRAY:\r\n                return new Uint32Array(buffer);\r\n            case TYPE_FLOAT32ARRAY:\r\n                return new Float32Array(buffer);\r\n            case TYPE_FLOAT64ARRAY:\r\n                return new Float64Array(buffer);\r\n            default:\r\n                throw new Error(\"Unkown type: \" + type);\r\n            }\r\n        }\r\n\r\n        var localforageSerializer = {\r\n            serialize: serialize,\r\n            deserialize: deserialize,\r\n            stringToBuffer: stringToBuffer,\r\n            bufferToString: bufferToString\r\n        };\r\n\r\n    /*\r\n     * Includes code from:\r\n     *\r\n     * base64-arraybuffer\r\n     * https://github.com/niklasvh/base64-arraybuffer\r\n     *\r\n     * Copyright (c) 2012 Niklas von Hertzen\r\n     * Licensed under the MIT license.\r\n     */\r\n\r\n        function createDbTable(t, dbInfo, callback, errorCallback) {\r\n            t.executeSql(\"CREATE TABLE IF NOT EXISTS \" + dbInfo.storeName + \" \" + \"(id INTEGER PRIMARY KEY, key unique, value)\", [], callback, errorCallback);\r\n        }\r\n\r\n// Open the WebSQL database (automatically creates one if one didn't\r\n// previously exist), using any options set in the config.\r\n        function _initStorage$1(options) {\r\n            var self = this;\r\n            var dbInfo = {\r\n                db: null\r\n            };\r\n\r\n            if (options) {\r\n                for (var i in options) {\r\n                    dbInfo[i] = typeof options[i] !== \"string\" ? options[i].toString() : options[i];\r\n                }\r\n            }\r\n\r\n            var dbInfoPromise = new Promise$1(function (resolve, reject) {\r\n            // Open the database; the openDatabase API will automatically\r\n            // create it for us if it doesn't exist.\r\n                try {\r\n                    dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\r\n                } catch (e) {\r\n                    return reject(e);\r\n                }\r\n\r\n            // Create our key/value table if it doesn't exist.\r\n                dbInfo.db.transaction(function (t) {\r\n                    createDbTable(t, dbInfo, function () {\r\n                    self._dbInfo = dbInfo;\r\n                    resolve();\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n                }, reject);\r\n            });\r\n\r\n            dbInfo.serializer = localforageSerializer;\r\n            return dbInfoPromise;\r\n        }\r\n\r\n        function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\r\n            t.executeSql(sqlStatement, args, callback, function (t, error) {\r\n                if (error.code === error.SYNTAX_ERR) {\r\n                    t.executeSql(\"SELECT name FROM sqlite_master \" + \"WHERE type='table' AND name = ?\", [name], function (t, results) {\r\n                    if (!results.rows.length) {\r\n                        // if the table is missing (was deleted)\r\n                        // re-create it table and retry\r\n                        createDbTable(t, dbInfo, function () {\r\n                            t.executeSql(sqlStatement, args, callback, errorCallback);\r\n                        }, errorCallback);\r\n                    } else {\r\n                        errorCallback(t, error);\r\n                    }\r\n                }, errorCallback);\r\n                } else {\r\n                    errorCallback(t, error);\r\n                }\r\n            }, errorCallback);\r\n        }\r\n\r\n        function getItem$1(key, callback) {\r\n            var self = this;\r\n\r\n            key = normalizeKey(key);\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    var dbInfo = self._dbInfo;\r\n\n                    dbInfo.db.transaction(function (t) {\r\n                    tryExecuteSql(t, dbInfo, \"SELECT * FROM \" + dbInfo.storeName + \" WHERE key = ? LIMIT 1\", [key], function (t, results) {\r\n                        var result = results.rows.length ? results.rows.item(0).value : null;\r\n\r\n                        // Check to see if this is serialized content we need to\r\n                        // unpack.\r\n                        if (result) {\r\n                            result = dbInfo.serializer.deserialize(result);\r\n                        }\r\n\r\n                        resolve(result);\r\n                    }, function (t, error) {\r\n\r\n                        reject(error);\r\n                    });\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function iterate$1(iterator, callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    var dbInfo = self._dbInfo;\r\n\r\n                    dbInfo.db.transaction(function (t) {\r\n                    tryExecuteSql(t, dbInfo, \"SELECT * FROM \" + dbInfo.storeName, [], function (t, results) {\r\n                        var rows = results.rows;\r\n                        var length = rows.length;\r\n\r\n                        for (var i = 0; i < length; i++) {\r\n                            var item = rows.item(i);\r\n                            var result = item.value;\r\n\r\n                            // Check to see if this is serialized content\r\n                            // we need to unpack.\r\n                            if (result) {\r\n                                result = dbInfo.serializer.deserialize(result);\r\n                            }\r\n\r\n                            result = iterator(result, item.key, i + 1);\r\n\r\n                            // void(0) prevents problems with redefinition\r\n                            // of `undefined`.\r\n                            if (result !== void 0) {\r\n                                resolve(result);\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        resolve();\r\n                    }, function (t, error) {\r\n                        reject(error);\r\n                    });\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function _setItem(key, value, callback, retriesLeft) {\r\n            var self = this;\r\n\r\n            key = normalizeKey(key);\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                // The localStorage API doesn't return undefined values in an\r\n                // \"expected\" way, so undefined is always cast to null in all\r\n                // drivers. See: https://github.com/mozilla/localForage/pull/42\r\n                    if (value === undefined) {\r\n                    value = null;\r\n                }\r\n\r\n                // Save the original value to pass to the callback.\r\n                    var originalValue = value;\r\n\r\n                    var dbInfo = self._dbInfo;\r\n\n                    dbInfo.serializer.serialize(value, function (value, error) {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        dbInfo.db.transaction(function (t) {\r\n                            tryExecuteSql(t, dbInfo, \"INSERT OR REPLACE INTO \" + dbInfo.storeName + \" \" + \"(key, value) VALUES (?, ?)\", [key, value], function () {\r\n                                resolve(originalValue);\r\n                            }, function (t, error) {\r\n                                reject(error);\r\n                            });\r\n                        }, function (sqlError) {\r\n                            // The transaction failed; check\r\n                            // to see if it's a quota error.\r\n                            if (sqlError.code === sqlError.QUOTA_ERR) {\r\n                                // We reject the callback outright for now, but\r\n                                // it's worth trying to re-run the transaction.\r\n                                // Even if the user accepts the prompt to use\r\n                                // more storage on Safari, this error will\r\n                                // be called.\r\n                                //\r\n                                // Try to re-run the transaction.\r\n                                if (retriesLeft > 0) {\r\n                                    resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\r\n                                    return;\r\n                                }\r\n                                reject(sqlError);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function setItem$1(key, value, callback) {\r\n            return _setItem.apply(this, [key, value, callback, 1]);\r\n        }\r\n\r\n        function removeItem$1(key, callback) {\r\n            var self = this;\r\n\r\n            key = normalizeKey(key);\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    var dbInfo = self._dbInfo;\r\n\n                    dbInfo.db.transaction(function (t) {\r\n                    tryExecuteSql(t, dbInfo, \"DELETE FROM \" + dbInfo.storeName + \" WHERE key = ?\", [key], function () {\r\n                        resolve();\r\n                    }, function (t, error) {\r\n                        reject(error);\r\n                    });\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Deletes every item in the table.\r\n// TODO: Find out if this resets the AUTO_INCREMENT number.\r\n        function clear$1(callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    var dbInfo = self._dbInfo;\r\n\n                    dbInfo.db.transaction(function (t) {\r\n                    tryExecuteSql(t, dbInfo, \"DELETE FROM \" + dbInfo.storeName, [], function () {\r\n                        resolve();\r\n                    }, function (t, error) {\r\n                        reject(error);\r\n                    });\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Does a simple `COUNT(key)` to get the number of items stored in\r\n// localForage.\r\n        function length$1(callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    var dbInfo = self._dbInfo;\r\n\n                    dbInfo.db.transaction(function (t) {\r\n                    // Ahhh, SQL makes this one soooooo easy.\r\n                    tryExecuteSql(t, dbInfo, \"SELECT COUNT(key) as c FROM \" + dbInfo.storeName, [], function (t, results) {\r\n                        var result = results.rows.item(0).c;\r\n\n                        resolve(result);\r\n                    }, function (t, error) {\r\n                        reject(error);\r\n                    });\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Return the key located at key index X; essentially gets the key from a\r\n// `WHERE id = ?`. This is the most efficient way I can think to implement\r\n// this rarely-used (in my experience) part of the API, but it can seem\r\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\r\n// the ID of each key will change every time it's updated. Perhaps a stored\r\n// procedure for the `setItem()` SQL would solve this problem?\r\n// TODO: Don't change ID on `setItem()`.\r\n        function key$1(n, callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    var dbInfo = self._dbInfo;\r\n\n                    dbInfo.db.transaction(function (t) {\r\n                    tryExecuteSql(t, dbInfo, \"SELECT key FROM \" + dbInfo.storeName + \" WHERE id = ? LIMIT 1\", [n + 1], function (t, results) {\r\n                        var result = results.rows.length ? results.rows.item(0).key : null;\r\n\n                        resolve(result);\r\n                    }, function (t, error) {\r\n                        reject(error);\r\n                    });\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function keys$1(callback) {\r\n            var self = this;\r\n\r\n            var promise = new Promise$1(function (resolve, reject) {\r\n                self.ready().then(function () {\r\n                    var dbInfo = self._dbInfo;\r\n\n                    dbInfo.db.transaction(function (t) {\r\n                    tryExecuteSql(t, dbInfo, \"SELECT key FROM \" + dbInfo.storeName, [], function (t, results) {\r\n                        var keys = [];\r\n\r\n                        for (var i = 0; i < results.rows.length; i++) {\r\n                            keys.push(results.rows.item(i).key);\r\n                        }\r\n\r\n                        resolve(keys);\r\n                    }, function (t, error) {\r\n                        reject(error);\r\n                    });\r\n                });\r\n                })[\"catch\"](reject);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// https://www.w3.org/TR/webdatabase/#databases\r\n// > There is no way to enumerate or delete the databases available for an origin from this API.\r\n        function getAllStoreNames(db) {\r\n            return new Promise$1(function (resolve, reject) {\r\n                db.transaction(function (t) {\r\n                    t.executeSql(\"SELECT name FROM sqlite_master \" + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\r\n                    var storeNames = [];\r\n\r\n                    for (var i = 0; i < results.rows.length; i++) {\r\n                        storeNames.push(results.rows.item(i).name);\r\n                    }\r\n\r\n                    resolve({\r\n                        db: db,\r\n                        storeNames: storeNames\r\n                    });\r\n                }, function (t, error) {\r\n                    reject(error);\r\n                });\r\n                }, function (sqlError) {\r\n                    reject(sqlError);\r\n                });\r\n            });\r\n        }\r\n\r\n        function dropInstance$1(options, callback) {\r\n            callback = getCallback.apply(this, arguments);\r\n\r\n            var currentConfig = this.config();\r\n\n            options = typeof options !== \"function\" && options || {};\r\n            if (!options.name) {\r\n                options.name = options.name || currentConfig.name;\r\n                options.storeName = options.storeName || currentConfig.storeName;\r\n            }\r\n\r\n            var self = this;\r\n            var promise;\r\n\n            if (!options.name) {\r\n                promise = Promise$1.reject(\"Invalid arguments\");\r\n            } else {\r\n                promise = new Promise$1(function (resolve) {\r\n                    var db;\r\n\n                    if (options.name === currentConfig.name) {\r\n                    // use the db reference of the current instance\r\n                    db = self._dbInfo.db;\r\n                } else {\r\n                    db = openDatabase(options.name, \"\", \"\", 0);\r\n                }\r\n\r\n                    if (!options.storeName) {\r\n                    // drop all database tables\r\n                    resolve(getAllStoreNames(db));\r\n                } else {\r\n                    resolve({\r\n                        db: db,\r\n                        storeNames: [options.storeName]\r\n                    });\r\n                }\r\n                }).then(function (operationInfo) {\r\n                return new Promise$1(function (resolve, reject) {\r\n                    operationInfo.db.transaction(function (t) {\r\n                        function dropTable(storeName) {\r\n                            return new Promise$1(function (resolve, reject) {\r\n                                t.executeSql(\"DROP TABLE IF EXISTS \" + storeName, [], function () {\r\n                                    resolve();\r\n                                }, function (t, error) {\r\n                                    reject(error);\r\n                                });\r\n                            });\r\n                        }\r\n\r\n                        var operations = [];\r\n\n                        for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\r\n                            operations.push(dropTable(operationInfo.storeNames[i]));\r\n                        }\r\n\r\n                        Promise$1.all(operations).then(function () {\r\n                            resolve();\r\n                        })[\"catch\"](function (e) {\r\n                            reject(e);\r\n                        });\r\n                    }, function (sqlError) {\r\n                        reject(sqlError);\r\n                    });\r\n                });\r\n            });\r\n            }\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        var webSQLStorage = {\r\n            _driver: \"webSQLStorage\",\r\n            _initStorage: _initStorage$1,\r\n            _support: isWebSQLValid(),\r\n            iterate: iterate$1,\r\n            getItem: getItem$1,\r\n            setItem: setItem$1,\r\n            removeItem: removeItem$1,\r\n            clear: clear$1,\r\n            length: length$1,\r\n            key: key$1,\r\n            keys: keys$1,\r\n            dropInstance: dropInstance$1\r\n        };\r\n\r\n        function isLocalStorageValid() {\r\n            try {\r\n                return typeof localStorage !== \"undefined\" && \"setItem\" in localStorage && typeof localStorage.setItem === \"function\";\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function _getKeyPrefix(options, defaultConfig) {\r\n            var keyPrefix = options.name + \"/\";\r\n\r\n            if (options.storeName !== defaultConfig.storeName) {\r\n                keyPrefix += options.storeName + \"/\";\r\n            }\r\n            return keyPrefix;\r\n        }\r\n\r\n// Check if localStorage throws when saving an item\r\n        function checkIfLocalStorageThrows() {\r\n            var localStorageTestKey = \"_localforage_support_test\";\r\n\r\n            try {\r\n                localStorage.setItem(localStorageTestKey, true);\r\n                localStorage.removeItem(localStorageTestKey);\r\n\r\n                return false;\r\n            } catch (e) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n// Check if localStorage is usable and allows to save an item\r\n// This method checks if localStorage is usable in Safari Private Browsing\r\n// mode, or in any other case where the available quota for localStorage\r\n// is 0 and there wasn't any saved items yet.\r\n        function _isLocalStorageUsable() {\r\n            return !checkIfLocalStorageThrows() || localStorage.length > 0;\r\n        }\r\n\r\n// Config the localStorage backend, using options set in the config.\r\n        function _initStorage$2(options) {\r\n            var self = this;\r\n            var dbInfo = {};\r\n\n            if (options) {\r\n                for (var i in options) {\r\n                    dbInfo[i] = options[i];\r\n                }\r\n            }\r\n\r\n            dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\r\n\r\n            if (!_isLocalStorageUsable()) {\r\n                return Promise$1.reject();\r\n            }\r\n\r\n            self._dbInfo = dbInfo;\r\n            dbInfo.serializer = localforageSerializer;\r\n\r\n            return Promise$1.resolve();\r\n        }\r\n\r\n// Remove all keys from the datastore, effectively destroying all data in\r\n// the app's key/value store!\r\n        function clear$2(callback) {\r\n            var self = this;\r\n            var promise = self.ready().then(function () {\r\n                var keyPrefix = self._dbInfo.keyPrefix;\r\n\r\n                for (var i = localStorage.length - 1; i >= 0; i--) {\r\n                    var key = localStorage.key(i);\r\n\r\n                    if (key.indexOf(keyPrefix) === 0) {\r\n                    localStorage.removeItem(key);\r\n                }\r\n                }\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Retrieve an item from the store. Unlike the original async_storage\r\n// library in Gaia, we don't modify return values at all. If a key's value\r\n// is `undefined`, we pass that value to the callback function.\r\n        function getItem$2(key, callback) {\r\n            var self = this;\r\n\r\n            key = normalizeKey(key);\r\n\r\n            var promise = self.ready().then(function () {\r\n                var dbInfo = self._dbInfo;\r\n                var result = localStorage.getItem(dbInfo.keyPrefix + key);\r\n\r\n            // If a result was found, parse it from the serialized\r\n            // string into a JS object. If result isn't truthy, the key\r\n            // is likely undefined and we'll pass it straight to the\r\n            // callback.\r\n                if (result) {\r\n                    result = dbInfo.serializer.deserialize(result);\r\n                }\r\n\r\n                return result;\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Iterate over all items in the store.\r\n        function iterate$2(iterator, callback) {\r\n            var self = this;\r\n\r\n            var promise = self.ready().then(function () {\r\n                var dbInfo = self._dbInfo;\r\n                var keyPrefix = dbInfo.keyPrefix;\r\n                var keyPrefixLength = keyPrefix.length;\r\n                var length = localStorage.length;\r\n\r\n            // We use a dedicated iterator instead of the `i` variable below\r\n            // so other keys we fetch in localStorage aren't counted in\r\n            // the `iterationNumber` argument passed to the `iterate()`\r\n            // callback.\r\n            //\r\n            // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\r\n                var iterationNumber = 1;\r\n\r\n                for (var i = 0; i < length; i++) {\r\n                    var key = localStorage.key(i);\r\n\n                    if (key.indexOf(keyPrefix) !== 0) {\r\n                    continue;\r\n                }\r\n                    var value = localStorage.getItem(key);\r\n\r\n                // If a result was found, parse it from the serialized\r\n                // string into a JS object. If result isn't truthy, the\r\n                // key is likely undefined and we'll pass it straight\r\n                // to the iterator.\r\n                    if (value) {\r\n                    value = dbInfo.serializer.deserialize(value);\r\n                }\r\n\r\n                    value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\r\n\r\n                    if (value !== void 0) {\r\n                    return value;\r\n                }\r\n                }\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Same as localStorage's key() method, except takes a callback.\r\n        function key$2(n, callback) {\r\n            var self = this;\r\n            var promise = self.ready().then(function () {\r\n                var dbInfo = self._dbInfo;\r\n                var result;\r\n\n                try {\r\n                    result = localStorage.key(n);\r\n                } catch (error) {\r\n                    result = null;\r\n                }\r\n\r\n            // Remove the prefix from the key, if a key is found.\r\n                if (result) {\r\n                    result = result.substring(dbInfo.keyPrefix.length);\r\n                }\r\n\r\n                return result;\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function keys$2(callback) {\r\n            var self = this;\r\n            var promise = self.ready().then(function () {\r\n                var dbInfo = self._dbInfo;\r\n                var length = localStorage.length;\r\n                var keys = [];\r\n\r\n                for (var i = 0; i < length; i++) {\r\n                    var itemKey = localStorage.key(i);\r\n\n                    if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\r\n                    keys.push(itemKey.substring(dbInfo.keyPrefix.length));\r\n                }\r\n                }\r\n\r\n                return keys;\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Supply the number of keys in the datastore to the callback function.\r\n        function length$2(callback) {\r\n            var self = this;\r\n            var promise = self.keys().then(function (keys) {\r\n                return keys.length;\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Remove an item from the store, nice and simple.\r\n        function removeItem$2(key, callback) {\r\n            var self = this;\r\n\r\n            key = normalizeKey(key);\r\n\r\n            var promise = self.ready().then(function () {\r\n                var dbInfo = self._dbInfo;\r\n\n                localStorage.removeItem(dbInfo.keyPrefix + key);\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n// Set a key's value and run an optional callback once the value is set.\r\n// Unlike Gaia's implementation, the callback function is passed the value,\r\n// in case you want to operate on that value only after you're sure it\r\n// saved, or something like that.\r\n        function setItem$2(key, value, callback) {\r\n            var self = this;\r\n\r\n            key = normalizeKey(key);\r\n\r\n            var promise = self.ready().then(function () {\r\n            // Convert undefined values to null.\r\n            // https://github.com/mozilla/localForage/pull/42\r\n                if (value === undefined) {\r\n                    value = null;\r\n                }\r\n\r\n            // Save the original value to pass to the callback.\r\n                var originalValue = value;\r\n\r\n                return new Promise$1(function (resolve, reject) {\r\n                    var dbInfo = self._dbInfo;\r\n\n                    dbInfo.serializer.serialize(value, function (value, error) {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        try {\r\n                            localStorage.setItem(dbInfo.keyPrefix + key, value);\r\n                            resolve(originalValue);\r\n                        } catch (e) {\r\n                            // localStorage capacity exceeded.\r\n                            // TODO: Make this a specific error/event.\r\n                            if (e.name === \"QuotaExceededError\" || e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") {\r\n                                reject(e);\r\n                            }\r\n                            reject(e);\r\n                        }\r\n                    }\r\n                });\r\n                });\r\n            });\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        function dropInstance$2(options, callback) {\r\n            callback = getCallback.apply(this, arguments);\r\n\r\n            options = typeof options !== \"function\" && options || {};\r\n            if (!options.name) {\r\n                var currentConfig = this.config();\r\n\n                options.name = options.name || currentConfig.name;\r\n                options.storeName = options.storeName || currentConfig.storeName;\r\n            }\r\n\r\n            var self = this;\r\n            var promise;\r\n\n            if (!options.name) {\r\n                promise = Promise$1.reject(\"Invalid arguments\");\r\n            } else {\r\n                promise = new Promise$1(function (resolve) {\r\n                    if (!options.storeName) {\r\n                    resolve(options.name + \"/\");\r\n                } else {\r\n                    resolve(_getKeyPrefix(options, self._defaultConfig));\r\n                }\r\n                }).then(function (keyPrefix) {\r\n                for (var i = localStorage.length - 1; i >= 0; i--) {\r\n                    var key = localStorage.key(i);\r\n\r\n                    if (key.indexOf(keyPrefix) === 0) {\r\n                        localStorage.removeItem(key);\r\n                    }\r\n                }\r\n            });\r\n            }\r\n\r\n            executeCallback(promise, callback);\r\n            return promise;\r\n        }\r\n\r\n        var localStorageWrapper = {\r\n            _driver: \"localStorageWrapper\",\r\n            _initStorage: _initStorage$2,\r\n            _support: isLocalStorageValid(),\r\n            iterate: iterate$2,\r\n            getItem: getItem$2,\r\n            setItem: setItem$2,\r\n            removeItem: removeItem$2,\r\n            clear: clear$2,\r\n            length: length$2,\r\n            key: key$2,\r\n            keys: keys$2,\r\n            dropInstance: dropInstance$2\r\n        };\r\n\r\n        var isArray = Array.isArray || function (arg) {\r\n            return Object.prototype.toString.call(arg) === \"[object Array]\";\r\n        };\r\n\r\n// Drivers are stored here when `defineDriver()` is called.\r\n// They are shared across all instances of localForage.\r\n        var DefinedDrivers = {};\r\n\r\n        var DriverSupport = {};\r\n\r\n        var DefaultDrivers = {\r\n            INDEXEDDB: asyncStorage,\r\n            WEBSQL: webSQLStorage,\r\n            LOCALSTORAGE: localStorageWrapper\r\n        };\r\n\r\n        var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\r\n\r\n        var OptionalDriverMethods = [\"dropInstance\"];\r\n\r\n        var LibraryMethods = [\"clear\", \"getItem\", \"iterate\", \"key\", \"keys\", \"length\", \"removeItem\", \"setItem\"].concat(OptionalDriverMethods);\r\n\r\n        var DefaultConfig = {\r\n            description: \"\",\r\n            driver: DefaultDriverOrder.slice(),\r\n            name: \"localforage\",\r\n        // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\r\n        // we can use without a prompt.\r\n            size: 4980736,\r\n            storeName: \"keyvaluepairs\",\r\n            version: 1.0\r\n        };\r\n\r\n        function callWhenReady(localForageInstance, libraryMethod) {\r\n            localForageInstance[libraryMethod] = function () {\r\n                var _args = arguments;\r\n\n                return localForageInstance.ready().then(function () {\r\n                    return localForageInstance[libraryMethod].apply(localForageInstance, _args);\r\n                });\r\n            };\r\n        }\r\n\r\n        function extend() {\r\n            for (var i = 1; i < arguments.length; i++) {\r\n                var arg = arguments[i];\r\n\r\n                if (arg) {\r\n                    for (var _key in arg) {\r\n                    if (arg.hasOwnProperty(_key)) {\r\n                        if (isArray(arg[_key])) {\r\n                            arguments[0][_key] = arg[_key].slice();\r\n                        } else {\r\n                            arguments[0][_key] = arg[_key];\r\n                        }\r\n                    }\r\n                }\r\n                }\r\n            }\r\n\r\n            return arguments[0];\r\n        }\r\n\r\n        var LocalForage = (function () {\r\n            function LocalForage(options) {\r\n                _classCallCheck(this, LocalForage);\r\n\r\n                for (var driverTypeKey in DefaultDrivers) {\r\n                    if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\r\n                    var driver = DefaultDrivers[driverTypeKey];\r\n                    var driverName = driver._driver;\r\n\n                    this[driverTypeKey] = driverName;\r\n\r\n                    if (!DefinedDrivers[driverName]) {\r\n                        // we don't need to wait for the promise,\r\n                        // since the default drivers can be defined\r\n                        // in a blocking manner\r\n                        this.defineDriver(driver);\r\n                    }\r\n                }\r\n                }\r\n\r\n                this._defaultConfig = extend({}, DefaultConfig);\r\n                this._config = extend({}, this._defaultConfig, options);\r\n                this._driverSet = null;\r\n                this._initDriver = null;\r\n                this._ready = false;\r\n                this._dbInfo = null;\r\n\r\n                this._wrapLibraryMethodsWithReady();\r\n                this.setDriver(this._config.driver)[\"catch\"](function () {});\r\n            }\r\n\r\n        // Set any config values for localForage; can be called anytime before\r\n        // the first API call (e.g. `getItem`, `setItem`).\r\n        // We loop through options so we don't overwrite existing config\r\n        // values.\r\n\r\n            LocalForage.prototype.config = function config(options) {\r\n            // If the options argument is an object, we use it to set values.\r\n            // Otherwise, we return either a specified config value or all\r\n            // config values.\r\n                if ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) === \"object\") {\r\n                // If localforage is ready and fully initialized, we can't set\r\n                // any new configuration values. Instead, we return an error.\r\n                    if (this._ready) {\r\n                    return new Error(\"Can't call config() after localforage \" + \"has been used.\");\r\n                }\r\n\r\n                    for (var i in options) {\r\n                    if (i === \"storeName\") {\r\n                        options[i] = options[i].replace(/\\W/g, \"_\");\r\n                    }\r\n\r\n                    if (i === \"version\" && typeof options[i] !== \"number\") {\r\n                        return new Error(\"Database version must be a number.\");\r\n                    }\r\n\r\n                    this._config[i] = options[i];\r\n                }\r\n\r\n                // after all config options are set and\r\n                // the driver option is used, try setting it\r\n                    if (\"driver\" in options && options.driver) {\r\n                    return this.setDriver(this._config.driver);\r\n                }\r\n\r\n                    return true;\r\n                } else if (typeof options === \"string\") {\r\n                return this._config[options];\r\n            }\r\n                return this._config;\r\n\r\n            };\r\n\r\n        // Used to define a custom driver, shared across all instances of\r\n        // localForage.\r\n\r\n            LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\r\n                var promise = new Promise$1(function (resolve, reject) {\r\n                    try {\r\n                    var driverName = driverObject._driver;\r\n                    var complianceError = new Error(\"Custom driver not compliant; see \" + \"https://mozilla.github.io/localForage/#definedriver\");\r\n\r\n                    // A driver name should be defined and not overlap with the\r\n                    // library-defined, default drivers.\r\n                    if (!driverObject._driver) {\r\n                        reject(complianceError);\r\n                        return;\r\n                    }\r\n\r\n                    var driverMethods = LibraryMethods.concat(\"_initStorage\");\r\n\n                    for (var i = 0, len = driverMethods.length; i < len; i++) {\r\n                        var driverMethodName = driverMethods[i];\r\n\r\n                        // when the property is there,\r\n                        // it should be a method even when optional\r\n                        var isRequired = OptionalDriverMethods.indexOf(driverMethodName) < 0;\r\n\n                        if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== \"function\") {\r\n                            reject(complianceError);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    var configureMissingMethods = function configureMissingMethods() {\r\n                        var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\r\n                            return function () {\r\n                                var error = new Error(\"Method \" + methodName + \" is not implemented by the current driver\");\r\n                                var promise = Promise$1.reject(error);\r\n\n                                executeCallback(promise, arguments[arguments.length - 1]);\r\n                                return promise;\r\n                            };\r\n                        };\r\n\r\n                        for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\r\n                            var optionalDriverMethod = OptionalDriverMethods[_i];\r\n\n                            if (!driverObject[optionalDriverMethod]) {\r\n                                driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    configureMissingMethods();\r\n\r\n                    var setDriverSupport = function setDriverSupport(support) {\r\n                        if (DefinedDrivers[driverName]) {\r\n                            console.info(\"Redefining LocalForage driver: \" + driverName);\r\n                        }\r\n                        DefinedDrivers[driverName] = driverObject;\r\n                        DriverSupport[driverName] = support;\r\n                        // don't use a then, so that we can define\r\n                        // drivers that have simple _support methods\r\n                        // in a blocking manner\r\n                        resolve();\r\n                    };\r\n\r\n                    if (\"_support\" in driverObject) {\r\n                        if (driverObject._support && typeof driverObject._support === \"function\") {\r\n                            driverObject._support().then(setDriverSupport, reject);\r\n                        } else {\r\n                            setDriverSupport(!!driverObject._support);\r\n                        }\r\n                    } else {\r\n                        setDriverSupport(true);\r\n                    }\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n                });\r\n\r\n                executeTwoCallbacks(promise, callback, errorCallback);\r\n                return promise;\r\n            };\r\n\r\n            LocalForage.prototype.driver = function driver() {\r\n                return this._driver || null;\r\n            };\r\n\r\n            LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\r\n                var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error(\"Driver not found.\"));\r\n\r\n                executeTwoCallbacks(getDriverPromise, callback, errorCallback);\r\n                return getDriverPromise;\r\n            };\r\n\r\n            LocalForage.prototype.getSerializer = function getSerializer(callback) {\r\n                var serializerPromise = Promise$1.resolve(localforageSerializer);\r\n\n                executeTwoCallbacks(serializerPromise, callback);\r\n                return serializerPromise;\r\n            };\r\n\r\n            LocalForage.prototype.ready = function ready(callback) {\r\n                var self = this;\r\n\r\n                var promise = self._driverSet.then(function () {\r\n                    if (self._ready === null) {\r\n                    self._ready = self._initDriver();\r\n                }\r\n\r\n                    return self._ready;\r\n                });\r\n\r\n                executeTwoCallbacks(promise, callback, callback);\r\n                return promise;\r\n            };\r\n\r\n            LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\r\n                var self = this;\r\n\r\n                if (!isArray(drivers)) {\r\n                    drivers = [drivers];\r\n                }\r\n\r\n                var supportedDrivers = this._getSupportedDrivers(drivers);\r\n\r\n                function setDriverToConfig() {\r\n                    self._config.driver = self.driver();\r\n                }\r\n\r\n                function extendSelfWithDriver(driver) {\r\n                    self._extend(driver);\r\n                    setDriverToConfig();\r\n\r\n                    self._ready = self._initStorage(self._config);\r\n                    return self._ready;\r\n                }\r\n\r\n                function initDriver(supportedDrivers) {\r\n                    return function () {\r\n                    var currentDriverIndex = 0;\r\n\r\n                    function driverPromiseLoop() {\r\n                        while (currentDriverIndex < supportedDrivers.length) {\r\n                            var driverName = supportedDrivers[currentDriverIndex];\r\n\n                            currentDriverIndex++;\r\n\r\n                            self._dbInfo = null;\r\n                            self._ready = null;\r\n\r\n                            return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\r\n                        }\r\n\r\n                        setDriverToConfig();\r\n                        var error = new Error(\"No available storage method found.\");\r\n\n                        self._driverSet = Promise$1.reject(error);\r\n                        return self._driverSet;\r\n                    }\r\n\r\n                    return driverPromiseLoop();\r\n                };\r\n                }\r\n\r\n            // There might be a driver initialization in progress\r\n            // so wait for it to finish in order to avoid a possible\r\n            // race condition to set _dbInfo\r\n                var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\r\n                    return Promise$1.resolve();\r\n                }) : Promise$1.resolve();\r\n\r\n                this._driverSet = oldDriverSetDone.then(function () {\r\n                    var driverName = supportedDrivers[0];\r\n\n                    self._dbInfo = null;\r\n                    self._ready = null;\r\n\r\n                    return self.getDriver(driverName).then(function (driver) {\r\n                    self._driver = driver._driver;\r\n                    setDriverToConfig();\r\n                    self._wrapLibraryMethodsWithReady();\r\n                    self._initDriver = initDriver(supportedDrivers);\r\n                });\r\n                })[\"catch\"](function () {\r\n                setDriverToConfig();\r\n                var error = new Error(\"No available storage method found.\");\r\n\n                self._driverSet = Promise$1.reject(error);\r\n                return self._driverSet;\r\n            });\r\n\r\n                executeTwoCallbacks(this._driverSet, callback, errorCallback);\r\n                return this._driverSet;\r\n            };\r\n\r\n            LocalForage.prototype.supports = function supports(driverName) {\r\n                return !!DriverSupport[driverName];\r\n            };\r\n\r\n            LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\r\n                extend(this, libraryMethodsAndProperties);\r\n            };\r\n\r\n            LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\r\n                var supportedDrivers = [];\r\n\n                for (var i = 0, len = drivers.length; i < len; i++) {\r\n                    var driverName = drivers[i];\r\n\n                    if (this.supports(driverName)) {\r\n                    supportedDrivers.push(driverName);\r\n                }\r\n                }\r\n                return supportedDrivers;\r\n            };\r\n\r\n            LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\r\n            // Add a stub for each driver API method that delays the call to the\r\n            // corresponding driver method until localForage is ready. These stubs\r\n            // will be replaced by the driver methods as soon as the driver is\r\n            // loaded, so there is no performance impact.\r\n                for (var i = 0, len = LibraryMethods.length; i < len; i++) {\r\n                    callWhenReady(this, LibraryMethods[i]);\r\n                }\r\n            };\r\n\r\n            LocalForage.prototype.createInstance = function createInstance(options) {\r\n                return new LocalForage(options);\r\n            };\r\n\r\n            return LocalForage;\r\n        }());\r\n\r\n// The actual localForage object that we expose as a module or via a\r\n// global. It's extended by pulling in one of our other libraries.\r\n\r\n        var localforage_js = new LocalForage();\r\n\r\n        module.exports = localforage_js;\r\n\r\n    }, {\"3\": 3}]}, {}, [4])(4);\r\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/localforage.js","/**\r\n * Created by Tom on 13.11.2017.\r\n */\r\n\r\n/**\r\n * Configuration\r\n */\r\nclass Config {\r\n    constructor() {\r\n        /**\r\n         * VERSION. Change this if you want to do a force reload\r\n         * @type {string}\r\n         */\r\n        this.VERSION = \"1.0.0\";\r\n\r\n        /**\r\n         * Enables debug logs\r\n         * @type {boolean}\r\n         */\r\n        this.developer = true;\r\n\r\n        /**\r\n         * The cache name.\r\n         * Not really important, so it uses your website adress as default\r\n         * but you can set it to anything\r\n         * @type {string}\r\n         */\r\n        this.CACHE_NAME = location.hostname + \"-v\";\r\n\r\n        /**\r\n         * These specify the URLs to cache (whitelist)\r\n         * @type {string[]}\r\n         */\r\n        this.URLS_TO_CACHE_WHITELIST = [\r\n            \".*\"\r\n        ];\r\n\r\n        /**\r\n         * These URLs won't be cached at all. You'll most likely want videos in there,\r\n         * since they can take up your cache space pretty quickly.\r\n         * Accepted are either Strings or RegExp and can contain any part of the URL or even the full URL.\r\n         * @type {string[]}\r\n         */\r\n        this.URLS_TO_CACHE_BLACKLIST = [];\r\n\r\n        /**\r\n         * URLs to precache. Accepted are only fully qualified Strings of relative or absolute URLs\r\n         */\r\n        this.PRE_CACHE = [];\r\n\r\n        /**\r\n         * Whitelist for all files that should be updated. Can contain RegExp or String.\r\n         * Accepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\r\n         * Generally best practice is to allow all and then blacklist the ones you don't want\r\n         * @type {string[]}\r\n         */\r\n        this.UPDATE_WHITELIST = [\r\n            \".*\"\r\n        ];\r\n\r\n        /**\r\n         * Blacklist for all files that should not be updated. Can contain RegExp or String.\r\n         * Accepted are either relative or absolute URLs or any part of any URL, like certain CDNs or so.\r\n         * Generally best practice (IMO) would be to exclude all files that have a fixed config.VERSION,\r\n         * like jQuery and Bootstrap.\r\n         * This also saves a lot of overhead\r\n         * since these files are generally pretty big and take a lot of time to process.\r\n         * @type {string[]}\r\n         */\r\n        this.UPDATE_BLACKLIST = [];\r\n\r\n        /**\r\n         * Strategy for the sw to use. Available are:\r\n         * 0: Network First,\r\n         * 1: Cache first,\r\n         * 2: Stale while revalidate\r\n         *\r\n         * While there may be more I don't really see the benefit of adding them.\r\n         * Cache only is basically cache first without checking for network connectivity.\r\n         * Network only is, in my opinion, the worst thing to do.\r\n         *\r\n         * If you want to add your own you can specify a callback in $STRATEGY_CALLBACKS\r\n         * @type {number}\r\n         */\r\n        this.STRATEGY = 2;\r\n\r\n        /**\r\n         * Strategy callbacks by type.\r\n         * Make sure that they always return a Promise<Response>\r\n         * @type {{0: networkFirst, 1: cacheFirst, 2: staleWhileRevalidate}}\r\n         */\r\n        this.STRATEGY_CALLBACKS = {\r\n            0: \"networkFirst\",\r\n            1: \"cacheFirst\",\r\n            2: \"staleWhileRevalidate\"\r\n        };\r\n\r\n        /**\r\n         * You can dynamically register callbacks by calling\r\n         * sw.postmessage(method, function)\r\n         * Method means the method of the request and function needs to be a valid function,\r\n         * which returns a Promise<Event> and accepts an event.\r\n         * Additionally, the function needs to be JSON stringified in order to work correctly, if you register it via postmessage.\r\n         * You can call other strategy callbacks in your own callback as well, though beware that they return a response and not a request.\r\n         * This is sort of a hook more than a callback.\r\n         * @type {{string:function}}\r\n         */\r\n        this.FETCH_CALLBACKS = {};\r\n\r\n        /**\r\n         * Update strategy to use with stale while revalidate\r\n         *\r\n         * Available are:\r\n         *\r\n         * 0: No strategy\r\n         * 1: Request each file when it was retrieved from cache without slowing down response time\r\n         * 2: Server-request which uses POST: {url:string} to request the server to return a md5 hash of the file like {hash:string}\r\n         * @type {number}\r\n         */\r\n        this.UPDATE_STRATEGY = 1;\r\n\r\n        /**\r\n         * This is the dictionary for the different strategies.\r\n         * You should add to it directly\r\n         */\r\n        this.UPDATE_CALLBACKS = {\r\n            0: null,\r\n            1: \"requestFileUpdate\",\r\n            2: \"requestServerHash\"\r\n        };\r\n\r\n        this.HASH_ADDRESS = \"/gethash\";\r\n\r\n        /**\r\n         * Enum for the different message types used for reporting\r\n         * @type {{}}\r\n         */\r\n        this.MESSAGE_TYPES = {\r\n            0: \"receivedUpdate\",\r\n            1: \"receivedConfigUpdate\",\r\n            2: \"methodToRegister\"\r\n        };\r\n    }\r\n}\r\n\r\nmodule.exports = Config;\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/config.js"],"sourceRoot":""}